/Users/putmanti/.virtualenvs/translator_testing/bin/python -m pytest test_onehops.py::test_TRAPI_KPs --one
============================= test session starts ==============================
platform darwin -- Python 3.9.7, pytest-6.2.5, py-1.10.0, pluggy-1.0.0
rootdir: /Users/putmanti/REPOS/translator/SRI_testing/onehop
plugins: anyio-3.3.1, asyncio-0.15.1, harvest-1.10.3
collected 210 items

test_onehops.py ..FF.FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [ 26%]
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [ 60%]
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [ 95%]
FFFFFFFFFF                                                               [100%]

=================================== FAILURES ===================================
_ test_TRAPI_KPs[test_triples/KP/Exposures_Provider/CAM-KP_API.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'CAM-KP_API.json', 'location': 'test_triples/KP/Exposures_Provider/CAM-KP_API.json', 'object': 'GO:0051607', 'object_category': 'biolink:Occurrent', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Exposures_Provider/CAM-KP_API.json', 'case': {'subject_category': 'biolink:I...ovider/CAM-KP_API.json', 'api_name': 'CAM-KP_API.json', 'url': 'https://stars-app.renci.org/cam-kp', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'CAM-KP_API.json', 'location': 'test_triples/KP/Exposures_Provider/CAM-KP_API.json', 'object': 'GO:0051607', 'object_category': 'biolink:Occurrent', ...}
creator = <function raise_subject_entity at 0x1066905e0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Exposures_Provider/CAM-KP_API.json', 'case': {'subject_category': 'biolink:I...ovider/CAM-KP_API.json', 'api_name': 'CAM-KP_API.json', 'url': 'https://stars-app.renci.org/cam-kp', 'query_opts': {}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
>       TRAPI_request, output_element, output_node_binding = creator(case)
E       TypeError: cannot unpack non-iterable NoneType object

test_onehops.py:162: TypeError
----------------------------- Captured stdout call -----------------------------
No Parent:  NCBITaxon:694009
_ test_TRAPI_KPs[test_triples/KP/Exposures_Provider/CAM-KP_API.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'CAM-KP_API.json', 'location': 'test_triples/KP/Exposures_Provider/CAM-KP_API.json', 'object': 'GO:0051607', 'object_category': 'biolink:Occurrent', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Exposures_Provider/CAM-KP_API.json', 'case': {'subject_category': 'biolink:I...knowledge_graph': {'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 400, 'response_json': None}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'CAM-KP_API.json', 'location': 'test_triples/KP/Exposures_Provider/CAM-KP_API.json', 'object': 'GO:0051607', 'object_category': 'biolink:Occurrent', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Exposures_Provider/CAM-KP_API.json', 'case': {'subject_category': 'biolink:I...knowledge_graph': {'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 400, 'response_json': None}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 400 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://stars-app.renci.org/cam-kp/query
_ test_TRAPI_KPs[test_triples/KP/Exposures_Provider/ICEES_API.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'ICEES_API.json', 'location': 'test_triples/KP/Exposures_Provider/ICEES_API.json', 'object': 'umlscui:C2348993', 'object_category': 'biolink:ActivityAndBehavior', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Exposures_Provider/ICEES_API.json', 'case': {'subject_category': 'biolink:Ac...ion': '4.0.0', 'datetime': '2021-09-09/23/21 19:48:26', 'n_results': 0, 'message_code': 'OK', 'code_description': ''}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'ICEES_API.json', 'location': 'test_triples/KP/Exposures_Provider/ICEES_API.json', 'object': 'umlscui:C2348993', 'object_category': 'biolink:ActivityAndBehavior', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Exposures_Provider/ICEES_API.json', 'case': {'subject_category': 'biolink:Ac...ion': '4.0.0', 'datetime': '2021-09-09/23/21 19:48:26', 'n_results': 0, 'message_code': 'OK', 'code_description': ''}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
>       assert is_valid_TRAPI(response_message)
E       AssertionError: assert False
E        +  where False = is_valid_TRAPI({'knowledge_graph': {'edges': {}, 'nodes': {'umlscui:C0562508': {'category': ['biolink:A', 'biolink:C', 'biolink:T', '...ink:ActivityAndBehavior', 'id': 'umlscui:C0562508'}, 'b': {'category': 'biolink:ActivityAndBehavior'}}}, 'results': []})

test_onehops.py:176: AssertionError
----------------------------- Captured stdout call -----------------------------
https://icees.renci.org:16340/query
'biolink:_' does not match '^biolink:[A-Z][a-zA-Z]*$'

Failed validating 'pattern' in schema[1]['items']:
    {'description': 'Compact URI (CURIE) for a Biolink class, '
                    'biolink:NamedThing or a child thereof. The CURIE must '
                    "use the prefix 'biolink:' followed by the PascalCase "
                    'class name.',
     'example': 'biolink:PhenotypicFeature',
     'externalDocs': {'description': 'Biolink model entities',
                      'url': 'https://biolink.github.io/biolink-model/docs/NamedThing.html'},
     'pattern': '^biolink:[A-Z][a-zA-Z]*$',
     'type': 'string'}

On instance[8]:
    'biolink:_'
_ test_TRAPI_KPs[test_triples/KP/Exposures_Provider/ICEES_API.json_0-by_object] _

KP_TRAPI_case = {'api_name': 'ICEES_API.json', 'location': 'test_triples/KP/Exposures_Provider/ICEES_API.json', 'object': 'umlscui:C2348993', 'object_category': 'biolink:ActivityAndBehavior', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Exposures_Provider/ICEES_API.json', 'case': {'subject_category': 'biolink:Ac..../features/knowledgegraph.py", line 465, in one_hop\n    source_curie = source_node["curie"]\nKeyError: \'curie\'\n'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'ICEES_API.json', 'location': 'test_triples/KP/Exposures_Provider/ICEES_API.json', 'object': 'umlscui:C2348993', 'object_category': 'biolink:ActivityAndBehavior', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Exposures_Provider/ICEES_API.json', 'case': {'subject_category': 'biolink:Ac..../features/knowledgegraph.py", line 465, in one_hop\n    source_curie = source_node["curie"]\nKeyError: \'curie\'\n'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       KeyError: 'results'

test_onehops.py:178: KeyError
----------------------------- Captured stdout call -----------------------------
https://icees.renci.org:16340/query
_ test_TRAPI_KPs[test_triples/KP/Exposures_Provider/ICEES_API.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'ICEES_API.json', 'location': 'test_triples/KP/Exposures_Provider/ICEES_API.json', 'object': 'umlscui:C2348993', 'object_category': 'biolink:ActivityAndBehavior', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Exposures_Provider/ICEES_API.json', 'case': {'subject_category': 'biolink:Ac...ures_Provider/ICEES_API.json', 'api_name': 'ICEES_API.json', 'url': 'https://icees.renci.org:16340', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_onehops.py:162: in execute_TRAPI_lookup
    TRAPI_request, output_element, output_node_binding = creator(case)
test_onehops.py:116: in raise_subject_entity
    parent_subject = ontology_kp.get_parent(subject, subject_cat)
ontology_kp.py:78: in get_parent
    query_entity = convert_to_preferred(curie,preferred_prefixes)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

curie = 'umlscui:C0562508'
allowedlist = {'CHEBI', 'CL', 'EFO', 'HP', 'MONDO', 'NCIT', ...}

    def convert_to_preferred(curie,allowedlist):
        j = {'curies':[curie]}
        result = post('https://nodenormalization-sri.renci.org/get_normalized_nodes',j)
>       new_ids = [ v['identifier'] for v in result[curie]['equivalent_identifiers'] ]
E       TypeError: 'NoneType' object is not subscriptable

ontology_kp.py:16: TypeError
_ test_TRAPI_KPs[test_triples/KP/Exposures_Provider/ICEES_API.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'ICEES_API.json', 'location': 'test_triples/KP/Exposures_Provider/ICEES_API.json', 'object': 'umlscui:C2348993', 'object_category': 'biolink:ActivityAndBehavior', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Exposures_Provider/ICEES_API.json', 'case': {'subject_category': 'biolink:Ac...ion': '4.0.0', 'datetime': '2021-09-09/23/21 19:48:27', 'n_results': 0, 'message_code': 'OK', 'code_description': ''}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'ICEES_API.json', 'location': 'test_triples/KP/Exposures_Provider/ICEES_API.json', 'object': 'umlscui:C2348993', 'object_category': 'biolink:ActivityAndBehavior', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Exposures_Provider/ICEES_API.json', 'case': {'subject_category': 'biolink:Ac...ion': '4.0.0', 'datetime': '2021-09-09/23/21 19:48:27', 'n_results': 0, 'message_code': 'OK', 'code_description': ''}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
>       assert is_valid_TRAPI(response_message)
E       AssertionError: assert False
E        +  where False = is_valid_TRAPI({'knowledge_graph': {'edges': {}, 'nodes': {'umlscui:C0562508': {'category': ['biolink:A', 'biolink:C', 'biolink:T', '...ry': 'biolink:ActivityAndBehavior', 'id': 'umlscui:C0562508'}, 'b': {'category': 'biolink:Occurrent'}}}, 'results': []})

test_onehops.py:176: AssertionError
----------------------------- Captured stdout call -----------------------------
https://icees.renci.org:16340/query
'biolink:_' does not match '^biolink:[A-Z][a-zA-Z]*$'

Failed validating 'pattern' in schema[1]['items']:
    {'description': 'Compact URI (CURIE) for a Biolink class, '
                    'biolink:NamedThing or a child thereof. The CURIE must '
                    "use the prefix 'biolink:' followed by the PascalCase "
                    'class name.',
     'example': 'biolink:PhenotypicFeature',
     'externalDocs': {'description': 'Biolink model entities',
                      'url': 'https://biolink.github.io/biolink-model/docs/NamedThing.html'},
     'pattern': '^biolink:[A-Z][a-zA-Z]*$',
     'type': 'string'}

On instance[8]:
    'biolink:_'
_ test_TRAPI_KPs[test_triples/KP/Exposures_Provider/ICEES_API.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'ICEES_API.json', 'location': 'test_triples/KP/Exposures_Provider/ICEES_API.json', 'object': 'umlscui:C2348993', 'object_category': 'biolink:ActivityAndBehavior', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Exposures_Provider/ICEES_API.json', 'case': {'subject_category': 'biolink:Ac...ion': '4.0.0', 'datetime': '2021-09-09/23/21 19:48:27', 'n_results': 0, 'message_code': 'OK', 'code_description': ''}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'ICEES_API.json', 'location': 'test_triples/KP/Exposures_Provider/ICEES_API.json', 'object': 'umlscui:C2348993', 'object_category': 'biolink:ActivityAndBehavior', ...}
creator = <function raise_predicate_by_subject at 0x1066904c0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Exposures_Provider/ICEES_API.json', 'case': {'subject_category': 'biolink:Ac...ion': '4.0.0', 'datetime': '2021-09-09/23/21 19:48:27', 'n_results': 0, 'message_code': 'OK', 'code_description': ''}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
>       assert is_valid_TRAPI(response_message)
E       AssertionError: assert False
E        +  where False = is_valid_TRAPI({'knowledge_graph': {'edges': {}, 'nodes': {'umlscui:C0562508': {'category': ['biolink:A', 'biolink:C', 'biolink:T', '...ink:ActivityAndBehavior', 'id': 'umlscui:C0562508'}, 'b': {'category': 'biolink:ActivityAndBehavior'}}}, 'results': []})

test_onehops.py:176: AssertionError
----------------------------- Captured stdout call -----------------------------
https://icees.renci.org:16340/query
'biolink:_' does not match '^biolink:[A-Z][a-zA-Z]*$'

Failed validating 'pattern' in schema[1]['items']:
    {'description': 'Compact URI (CURIE) for a Biolink class, '
                    'biolink:NamedThing or a child thereof. The CURIE must '
                    "use the prefix 'biolink:' followed by the PascalCase "
                    'class name.',
     'example': 'biolink:PhenotypicFeature',
     'externalDocs': {'description': 'Biolink model entities',
                      'url': 'https://biolink.github.io/biolink-model/docs/NamedThing.html'},
     'pattern': '^biolink:[A-Z][a-zA-Z]*$',
     'type': 'string'}

On instance[8]:
    'biolink:_'
___ test_TRAPI_KPs[test_triples/KP/Expander_Agent/RTX_KG2.json_0-by_subject] ___

KP_TRAPI_case = {'api_name': 'RTX_KG2.json', 'location': 'test_triples/KP/Expander_Agent/RTX_KG2.json', 'object': 'biolink:catalyst_qualifier', 'object_category': 'biolink:InformationContentEntity', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Expander_Agent/RTX_KG2.json', 'case': {'subject_category': 'biolink:Informat...knowledge_graph': {'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 503, 'response_json': None}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'RTX_KG2.json', 'location': 'test_triples/KP/Expander_Agent/RTX_KG2.json', 'object': 'biolink:catalyst_qualifier', 'object_category': 'biolink:InformationContentEntity', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Expander_Agent/RTX_KG2.json', 'case': {'subject_category': 'biolink:Informat...knowledge_graph': {'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 503, 'response_json': None}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 503 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://arax.ncats.io/api/rtxkg2/v1.1/query/query
___ test_TRAPI_KPs[test_triples/KP/Expander_Agent/RTX_KG2.json_0-by_object] ____

KP_TRAPI_case = {'api_name': 'RTX_KG2.json', 'location': 'test_triples/KP/Expander_Agent/RTX_KG2.json', 'object': 'biolink:catalyst_qualifier', 'object_category': 'biolink:InformationContentEntity', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Expander_Agent/RTX_KG2.json', 'case': {'subject_category': 'biolink:Informat...knowledge_graph': {'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 503, 'response_json': None}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'RTX_KG2.json', 'location': 'test_triples/KP/Expander_Agent/RTX_KG2.json', 'object': 'biolink:catalyst_qualifier', 'object_category': 'biolink:InformationContentEntity', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Expander_Agent/RTX_KG2.json', 'case': {'subject_category': 'biolink:Informat...knowledge_graph': {'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 503, 'response_json': None}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 503 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://arax.ncats.io/api/rtxkg2/v1.1/query/query
_ test_TRAPI_KPs[test_triples/KP/Expander_Agent/RTX_KG2.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'RTX_KG2.json', 'location': 'test_triples/KP/Expander_Agent/RTX_KG2.json', 'object': 'biolink:catalyst_qualifier', 'object_category': 'biolink:InformationContentEntity', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Expander_Agent/RTX_KG2.json', 'case': {'subject_category': 'biolink:Informat...ent/RTX_KG2.json', 'api_name': 'RTX_KG2.json', 'url': 'https://arax.ncats.io/api/rtxkg2/v1.1/query', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_onehops.py:162: in execute_TRAPI_lookup
    TRAPI_request, output_element, output_node_binding = creator(case)
test_onehops.py:116: in raise_subject_entity
    parent_subject = ontology_kp.get_parent(subject, subject_cat)
ontology_kp.py:78: in get_parent
    query_entity = convert_to_preferred(curie,preferred_prefixes)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

curie = 'biolink:chemical_to_chemical_derivation_association_catalyst_qualifier'
allowedlist = {'CHEBI', 'CL', 'EFO', 'HP', 'MONDO', 'NCIT', ...}

    def convert_to_preferred(curie,allowedlist):
        j = {'curies':[curie]}
        result = post('https://nodenormalization-sri.renci.org/get_normalized_nodes',j)
>       new_ids = [ v['identifier'] for v in result[curie]['equivalent_identifiers'] ]
E       TypeError: 'NoneType' object is not subscriptable

ontology_kp.py:16: TypeError
_ test_TRAPI_KPs[test_triples/KP/Expander_Agent/RTX_KG2.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'RTX_KG2.json', 'location': 'test_triples/KP/Expander_Agent/RTX_KG2.json', 'object': 'biolink:catalyst_qualifier', 'object_category': 'biolink:InformationContentEntity', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Expander_Agent/RTX_KG2.json', 'case': {'subject_category': 'biolink:Informat...knowledge_graph': {'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 503, 'response_json': None}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'RTX_KG2.json', 'location': 'test_triples/KP/Expander_Agent/RTX_KG2.json', 'object': 'biolink:catalyst_qualifier', 'object_category': 'biolink:InformationContentEntity', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Expander_Agent/RTX_KG2.json', 'case': {'subject_category': 'biolink:Informat...knowledge_graph': {'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 503, 'response_json': None}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 503 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://arax.ncats.io/api/rtxkg2/v1.1/query/query
_ test_TRAPI_KPs[test_triples/KP/Expander_Agent/RTX_KG2.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'RTX_KG2.json', 'location': 'test_triples/KP/Expander_Agent/RTX_KG2.json', 'object': 'biolink:catalyst_qualifier', 'object_category': 'biolink:InformationContentEntity', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Expander_Agent/RTX_KG2.json', 'case': {'subject_category': 'biolink:Informat...knowledge_graph': {'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 503, 'response_json': None}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'RTX_KG2.json', 'location': 'test_triples/KP/Expander_Agent/RTX_KG2.json', 'object': 'biolink:catalyst_qualifier', 'object_category': 'biolink:InformationContentEntity', ...}
creator = <function raise_predicate_by_subject at 0x1066904c0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Expander_Agent/RTX_KG2.json', 'case': {'subject_category': 'biolink:Informat...knowledge_graph': {'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 503, 'response_json': None}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 503 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://arax.ncats.io/api/rtxkg2/v1.1/query/query
_ test_TRAPI_KPs[test_triples/KP/Genetics_Provider/All_combinations.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'All_combinations.json', 'location': 'test_triples/KP/Genetics_Provider/All_combinations.json', 'object': 'MONDO:0005148', 'object_category': 'biolink:DiseaseOrPhenotypicFeature', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Genetics_Provider/All_combinations.json', 'case': {'subject_category': 'biol...knowledge_graph': {'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 502, 'response_json': None}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'All_combinations.json', 'location': 'test_triples/KP/Genetics_Provider/All_combinations.json', 'object': 'MONDO:0005148', 'object_category': 'biolink:DiseaseOrPhenotypicFeature', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Genetics_Provider/All_combinations.json', 'case': {'subject_category': 'biol...knowledge_graph': {'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 502, 'response_json': None}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 502 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://translator.broadinstitute.org/genetics_provider/trapi/v1.0/query
_ test_TRAPI_KPs[test_triples/KP/Genetics_Provider/All_combinations.json_0-by_object] _

KP_TRAPI_case = {'api_name': 'All_combinations.json', 'location': 'test_triples/KP/Genetics_Provider/All_combinations.json', 'object': 'MONDO:0005148', 'object_category': 'biolink:DiseaseOrPhenotypicFeature', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Genetics_Provider/All_combinations.json', 'case': {'subject_category': 'biol...knowledge_graph': {'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 502, 'response_json': None}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'All_combinations.json', 'location': 'test_triples/KP/Genetics_Provider/All_combinations.json', 'object': 'MONDO:0005148', 'object_category': 'biolink:DiseaseOrPhenotypicFeature', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Genetics_Provider/All_combinations.json', 'case': {'subject_category': 'biol...knowledge_graph': {'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 502, 'response_json': None}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 502 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://translator.broadinstitute.org/genetics_provider/trapi/v1.0/query
_ test_TRAPI_KPs[test_triples/KP/Genetics_Provider/All_combinations.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'All_combinations.json', 'location': 'test_triples/KP/Genetics_Provider/All_combinations.json', 'object': 'MONDO:0005148', 'object_category': 'biolink:DiseaseOrPhenotypicFeature', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Genetics_Provider/All_combinations.json', 'case': {'subject_category': 'biol...All_combinations.json', 'url': 'https://translator.broadinstitute.org/genetics_provider/trapi/v1.0', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'All_combinations.json', 'location': 'test_triples/KP/Genetics_Provider/All_combinations.json', 'object': 'MONDO:0005148', 'object_category': 'biolink:DiseaseOrPhenotypicFeature', ...}
creator = <function raise_subject_entity at 0x1066905e0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Genetics_Provider/All_combinations.json', 'case': {'subject_category': 'biol...All_combinations.json', 'url': 'https://translator.broadinstitute.org/genetics_provider/trapi/v1.0', 'query_opts': {}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
>       TRAPI_request, output_element, output_node_binding = creator(case)
E       TypeError: cannot unpack non-iterable NoneType object

test_onehops.py:162: TypeError
----------------------------- Captured stdout call -----------------------------
No Parent:  NCBIGene:5468
_ test_TRAPI_KPs[test_triples/KP/Genetics_Provider/All_combinations.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'All_combinations.json', 'location': 'test_triples/KP/Genetics_Provider/All_combinations.json', 'object': 'MONDO:0005148', 'object_category': 'biolink:DiseaseOrPhenotypicFeature', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Genetics_Provider/All_combinations.json', 'case': {'subject_category': 'biol...knowledge_graph': {'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 502, 'response_json': None}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'All_combinations.json', 'location': 'test_triples/KP/Genetics_Provider/All_combinations.json', 'object': 'MONDO:0005148', 'object_category': 'biolink:DiseaseOrPhenotypicFeature', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Genetics_Provider/All_combinations.json', 'case': {'subject_category': 'biol...knowledge_graph': {'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 502, 'response_json': None}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 502 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://translator.broadinstitute.org/genetics_provider/trapi/v1.0/query
_ test_TRAPI_KPs[test_triples/KP/Genetics_Provider/All_combinations.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'All_combinations.json', 'location': 'test_triples/KP/Genetics_Provider/All_combinations.json', 'object': 'MONDO:0005148', 'object_category': 'biolink:DiseaseOrPhenotypicFeature', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Genetics_Provider/All_combinations.json', 'case': {'subject_category': 'biol...knowledge_graph': {'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 502, 'response_json': None}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'All_combinations.json', 'location': 'test_triples/KP/Genetics_Provider/All_combinations.json', 'object': 'MONDO:0005148', 'object_category': 'biolink:DiseaseOrPhenotypicFeature', ...}
creator = <function raise_predicate_by_subject at 0x1066904c0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Genetics_Provider/All_combinations.json', 'case': {'subject_category': 'biol...knowledge_graph': {'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 502, 'response_json': None}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 502 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://translator.broadinstitute.org/genetics_provider/trapi/v1.0/query
_ test_TRAPI_KPs[test_triples/KP/Standards_Reference_Implementation_Team/SRI_Reference_Knowledge_Graph_API.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'SRI_Reference_Knowledge_Graph_API.json', 'location': 'test_triples/KP/Standards_Reference_Implementation...m/SRI_Reference_Knowledge_Graph_API.json', 'object': 'GO:1905920', 'object_category': 'biolink:BiologicalProcess', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Standards_Reference_Implementation_Team/SRI_Reference_Knowledge_Graph_API.js...loc': ['body', 'message'], 'msg': 'Query graph should contain at least one bound node.', 'type': 'assertion_error'}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'SRI_Reference_Knowledge_Graph_API.json', 'location': 'test_triples/KP/Standards_Reference_Implementation...m/SRI_Reference_Knowledge_Graph_API.json', 'object': 'GO:1905920', 'object_category': 'biolink:BiologicalProcess', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Standards_Reference_Implementation_Team/SRI_Reference_Knowledge_Graph_API.js...loc': ['body', 'message'], 'msg': 'Query graph should contain at least one bound node.', 'type': 'assertion_error'}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 422 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://trapi.monarchinitiative.org/query
_ test_TRAPI_KPs[test_triples/KP/Standards_Reference_Implementation_Team/SRI_Reference_Knowledge_Graph_API.json_0-by_object] _

KP_TRAPI_case = {'api_name': 'SRI_Reference_Knowledge_Graph_API.json', 'location': 'test_triples/KP/Standards_Reference_Implementation...m/SRI_Reference_Knowledge_Graph_API.json', 'object': 'GO:1905920', 'object_category': 'biolink:BiologicalProcess', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Standards_Reference_Implementation_Team/SRI_Reference_Knowledge_Graph_API.js...loc': ['body', 'message'], 'msg': 'Query graph should contain at least one bound node.', 'type': 'assertion_error'}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'SRI_Reference_Knowledge_Graph_API.json', 'location': 'test_triples/KP/Standards_Reference_Implementation...m/SRI_Reference_Knowledge_Graph_API.json', 'object': 'GO:1905920', 'object_category': 'biolink:BiologicalProcess', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Standards_Reference_Implementation_Team/SRI_Reference_Knowledge_Graph_API.js...loc': ['body', 'message'], 'msg': 'Query graph should contain at least one bound node.', 'type': 'assertion_error'}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 422 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://trapi.monarchinitiative.org/query
_ test_TRAPI_KPs[test_triples/KP/Standards_Reference_Implementation_Team/SRI_Reference_Knowledge_Graph_API.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'SRI_Reference_Knowledge_Graph_API.json', 'location': 'test_triples/KP/Standards_Reference_Implementation...m/SRI_Reference_Knowledge_Graph_API.json', 'object': 'GO:1905920', 'object_category': 'biolink:BiologicalProcess', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Standards_Reference_Implementation_Team/SRI_Reference_Knowledge_Graph_API.js... 'api_name': 'SRI_Reference_Knowledge_Graph_API.json', 'url': 'https://trapi.monarchinitiative.org', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'SRI_Reference_Knowledge_Graph_API.json', 'location': 'test_triples/KP/Standards_Reference_Implementation...m/SRI_Reference_Knowledge_Graph_API.json', 'object': 'GO:1905920', 'object_category': 'biolink:BiologicalProcess', ...}
creator = <function raise_subject_entity at 0x1066905e0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Standards_Reference_Implementation_Team/SRI_Reference_Knowledge_Graph_API.js... 'api_name': 'SRI_Reference_Knowledge_Graph_API.json', 'url': 'https://trapi.monarchinitiative.org', 'query_opts': {}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
>       TRAPI_request, output_element, output_node_binding = creator(case)
E       TypeError: cannot unpack non-iterable NoneType object

test_onehops.py:162: TypeError
----------------------------- Captured stdout call -----------------------------
No Parent:  ENSEMBL:ENSG00000175344
_ test_TRAPI_KPs[test_triples/KP/Standards_Reference_Implementation_Team/SRI_Reference_Knowledge_Graph_API.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'SRI_Reference_Knowledge_Graph_API.json', 'location': 'test_triples/KP/Standards_Reference_Implementation...m/SRI_Reference_Knowledge_Graph_API.json', 'object': 'GO:1905920', 'object_category': 'biolink:BiologicalProcess', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Standards_Reference_Implementation_Team/SRI_Reference_Knowledge_Graph_API.js...loc': ['body', 'message'], 'msg': 'Query graph should contain at least one bound node.', 'type': 'assertion_error'}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'SRI_Reference_Knowledge_Graph_API.json', 'location': 'test_triples/KP/Standards_Reference_Implementation...m/SRI_Reference_Knowledge_Graph_API.json', 'object': 'GO:1905920', 'object_category': 'biolink:BiologicalProcess', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Standards_Reference_Implementation_Team/SRI_Reference_Knowledge_Graph_API.js...loc': ['body', 'message'], 'msg': 'Query graph should contain at least one bound node.', 'type': 'assertion_error'}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 422 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://trapi.monarchinitiative.org/query
_ test_TRAPI_KPs[test_triples/KP/Standards_Reference_Implementation_Team/SRI_Reference_Knowledge_Graph_API.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'SRI_Reference_Knowledge_Graph_API.json', 'location': 'test_triples/KP/Standards_Reference_Implementation...m/SRI_Reference_Knowledge_Graph_API.json', 'object': 'GO:1905920', 'object_category': 'biolink:BiologicalProcess', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Standards_Reference_Implementation_Team/SRI_Reference_Knowledge_Graph_API.js...loc': ['body', 'message'], 'msg': 'Query graph should contain at least one bound node.', 'type': 'assertion_error'}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'SRI_Reference_Knowledge_Graph_API.json', 'location': 'test_triples/KP/Standards_Reference_Implementation...m/SRI_Reference_Knowledge_Graph_API.json', 'object': 'GO:1905920', 'object_category': 'biolink:BiologicalProcess', ...}
creator = <function raise_predicate_by_subject at 0x1066904c0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Standards_Reference_Implementation_Team/SRI_Reference_Knowledge_Graph_API.js...loc': ['body', 'message'], 'msg': 'Query graph should contain at least one bound node.', 'type': 'assertion_error'}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 422 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://trapi.monarchinitiative.org/query
_ test_TRAPI_KPs[test_triples/KP/Molecular_Data_Provider/MolePro.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'MolePro.json', 'location': 'test_triples/KP/Molecular_Data_Provider/MolePro.json', 'object': 'MESH:D001249', 'object_category': 'biolink:Disease', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Molecular_Data_Provider/MolePro.json', 'case': {'subject_category': 'biolink...knowledge_graph': {'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 502, 'response_json': None}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'MolePro.json', 'location': 'test_triples/KP/Molecular_Data_Provider/MolePro.json', 'object': 'MESH:D001249', 'object_category': 'biolink:Disease', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Molecular_Data_Provider/MolePro.json', 'case': {'subject_category': 'biolink...knowledge_graph': {'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 502, 'response_json': None}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 502 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://translator.broadinstitute.org/molepro/trapi/v1.0/query
_ test_TRAPI_KPs[test_triples/KP/Molecular_Data_Provider/MolePro.json_0-by_object] _

KP_TRAPI_case = {'api_name': 'MolePro.json', 'location': 'test_triples/KP/Molecular_Data_Provider/MolePro.json', 'object': 'MESH:D001249', 'object_category': 'biolink:Disease', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Molecular_Data_Provider/MolePro.json', 'case': {'subject_category': 'biolink...knowledge_graph': {'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 502, 'response_json': None}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'MolePro.json', 'location': 'test_triples/KP/Molecular_Data_Provider/MolePro.json', 'object': 'MESH:D001249', 'object_category': 'biolink:Disease', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Molecular_Data_Provider/MolePro.json', 'case': {'subject_category': 'biolink...knowledge_graph': {'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 502, 'response_json': None}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 502 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://translator.broadinstitute.org/molepro/trapi/v1.0/query
_ test_TRAPI_KPs[test_triples/KP/Molecular_Data_Provider/MolePro.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'MolePro.json', 'location': 'test_triples/KP/Molecular_Data_Provider/MolePro.json', 'object': 'MESH:D001249', 'object_category': 'biolink:Disease', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Molecular_Data_Provider/MolePro.json', 'case': {'subject_category': 'biolink...son', 'api_name': 'MolePro.json', 'url': 'https://translator.broadinstitute.org/molepro/trapi/v1.0', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_onehops.py:162: in execute_TRAPI_lookup
    TRAPI_request, output_element, output_node_binding = creator(case)
test_onehops.py:116: in raise_subject_entity
    parent_subject = ontology_kp.get_parent(subject, subject_cat)
ontology_kp.py:81: in get_parent
    preferred_parent = get_ontology_parent(query_entity,entity_type)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

curie = 'CHEBI:3002', btype = 'biolink:ChemicalSubstance'

    def get_ontology_parent(curie,btype):
        #Here's a bunch of anscestors
        ancestors = get_ontology_ancestors(curie,btype)
        #Now, to get the one closest to the input, we see how many ancestors each ancestor has.  Largest number == lowest down
        ancount = []
        for anc in ancestors:
            second_ancestors = get_ontology_ancestors(anc,btype)
            ancount.append( (len(second_ancestors), anc))
        ancount.sort()
>       return ancount[-1][1]
E       IndexError: list index out of range

ontology_kp.py:69: IndexError
_ test_TRAPI_KPs[test_triples/KP/Molecular_Data_Provider/MolePro.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'MolePro.json', 'location': 'test_triples/KP/Molecular_Data_Provider/MolePro.json', 'object': 'MESH:D001249', 'object_category': 'biolink:Disease', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Molecular_Data_Provider/MolePro.json', 'case': {'subject_category': 'biolink...knowledge_graph': {'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 502, 'response_json': None}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'MolePro.json', 'location': 'test_triples/KP/Molecular_Data_Provider/MolePro.json', 'object': 'MESH:D001249', 'object_category': 'biolink:Disease', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Molecular_Data_Provider/MolePro.json', 'case': {'subject_category': 'biolink...knowledge_graph': {'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 502, 'response_json': None}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 502 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://translator.broadinstitute.org/molepro/trapi/v1.0/query
_ test_TRAPI_KPs[test_triples/KP/Molecular_Data_Provider/MolePro.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'MolePro.json', 'location': 'test_triples/KP/Molecular_Data_Provider/MolePro.json', 'object': 'MESH:D001249', 'object_category': 'biolink:Disease', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Molecular_Data_Provider/MolePro.json', 'case': {'subject_category': 'biolink...knowledge_graph': {'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 502, 'response_json': None}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'MolePro.json', 'location': 'test_triples/KP/Molecular_Data_Provider/MolePro.json', 'object': 'MESH:D001249', 'object_category': 'biolink:Disease', ...}
creator = <function raise_predicate_by_subject at 0x1066904c0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Molecular_Data_Provider/MolePro.json', 'case': {'subject_category': 'biolink...knowledge_graph': {'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 502, 'response_json': None}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 502 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://translator.broadinstitute.org/molepro/trapi/v1.0/query
_ test_TRAPI_KPs[test_triples/KP/Text_Mining_Provider/Text_Mining_Targeted_Association_API.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'Text_Mining_Targeted_Association_API.json', 'location': 'test_triples/KP/Text_Mining_Provider/Text_Mining_Targeted_Association_API.json', 'object': 'PR:000031567', 'object_category': 'biolink:GeneOrGeneProduct', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Text_Mining_Provider/Text_Mining_Targeted_Association_API.json', 'case': {'s...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Text_Mining_Targeted_Association_API.json', 'location': 'test_triples/KP/Text_Mining_Provider/Text_Mining_Targeted_Association_API.json', 'object': 'PR:000031567', 'object_category': 'biolink:GeneOrGeneProduct', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Text_Mining_Provider/Text_Mining_Targeted_Association_API.json', 'case': {'s...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/978fe380a147a8641caf72320862697b/query
_ test_TRAPI_KPs[test_triples/KP/Text_Mining_Provider/Text_Mining_Targeted_Association_API.json_0-by_object] _

KP_TRAPI_case = {'api_name': 'Text_Mining_Targeted_Association_API.json', 'location': 'test_triples/KP/Text_Mining_Provider/Text_Mining_Targeted_Association_API.json', 'object': 'PR:000031567', 'object_category': 'biolink:GeneOrGeneProduct', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Text_Mining_Provider/Text_Mining_Targeted_Association_API.json', 'case': {'s...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Text_Mining_Targeted_Association_API.json', 'location': 'test_triples/KP/Text_Mining_Provider/Text_Mining_Targeted_Association_API.json', 'object': 'PR:000031567', 'object_category': 'biolink:GeneOrGeneProduct', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Text_Mining_Provider/Text_Mining_Targeted_Association_API.json', 'case': {'s...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/978fe380a147a8641caf72320862697b/query
_ test_TRAPI_KPs[test_triples/KP/Text_Mining_Provider/Text_Mining_Targeted_Association_API.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'Text_Mining_Targeted_Association_API.json', 'location': 'test_triples/KP/Text_Mining_Provider/Text_Mining_Targeted_Association_API.json', 'object': 'PR:000031567', 'object_category': 'biolink:GeneOrGeneProduct', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Text_Mining_Provider/Text_Mining_Targeted_Association_API.json', 'case': {'s...sociation_API.json', 'url': 'https://api.bte.ncats.io/v1/smartapi/978fe380a147a8641caf72320862697b', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_onehops.py:162: in execute_TRAPI_lookup
    TRAPI_request, output_element, output_node_binding = creator(case)
test_onehops.py:116: in raise_subject_entity
    parent_subject = ontology_kp.get_parent(subject, subject_cat)
ontology_kp.py:81: in get_parent
    preferred_parent = get_ontology_parent(query_entity,entity_type)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

curie = 'CHEBI:3215', btype = 'biolink:ChemicalSubstance'

    def get_ontology_parent(curie,btype):
        #Here's a bunch of anscestors
        ancestors = get_ontology_ancestors(curie,btype)
        #Now, to get the one closest to the input, we see how many ancestors each ancestor has.  Largest number == lowest down
        ancount = []
        for anc in ancestors:
            second_ancestors = get_ontology_ancestors(anc,btype)
            ancount.append( (len(second_ancestors), anc))
        ancount.sort()
>       return ancount[-1][1]
E       IndexError: list index out of range

ontology_kp.py:69: IndexError
_ test_TRAPI_KPs[test_triples/KP/Text_Mining_Provider/Text_Mining_Targeted_Association_API.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'Text_Mining_Targeted_Association_API.json', 'location': 'test_triples/KP/Text_Mining_Provider/Text_Mining_Targeted_Association_API.json', 'object': 'PR:000031567', 'object_category': 'biolink:GeneOrGeneProduct', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Text_Mining_Provider/Text_Mining_Targeted_Association_API.json', 'case': {'s...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Text_Mining_Targeted_Association_API.json', 'location': 'test_triples/KP/Text_Mining_Provider/Text_Mining_Targeted_Association_API.json', 'object': 'PR:000031567', 'object_category': 'biolink:GeneOrGeneProduct', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Text_Mining_Provider/Text_Mining_Targeted_Association_API.json', 'case': {'s...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/978fe380a147a8641caf72320862697b/query
_ test_TRAPI_KPs[test_triples/KP/Text_Mining_Provider/Text_Mining_Targeted_Association_API.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'Text_Mining_Targeted_Association_API.json', 'location': 'test_triples/KP/Text_Mining_Provider/Text_Mining_Targeted_Association_API.json', 'object': 'PR:000031567', 'object_category': 'biolink:GeneOrGeneProduct', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Text_Mining_Provider/Text_Mining_Targeted_Association_API.json', 'case': {'s...sociation_API.json', 'url': 'https://api.bte.ncats.io/v1/smartapi/978fe380a147a8641caf72320862697b', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_onehops.py:162: in execute_TRAPI_lookup
    TRAPI_request, output_element, output_node_binding = creator(case)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

request = {'api_name': 'Text_Mining_Targeted_Association_API.json', 'location': 'test_triples/KP/Text_Mining_Provider/Text_Mining_Targeted_Association_API.json', 'object': 'PR:000031567', 'object_category': 'biolink:GeneOrGeneProduct', ...}

    def raise_predicate_by_subject(request):
        """Given a known triple, create a TRAPI message that uses the parent of the original predicate and looks up
        the object by the subject"""
        transformed_request = request.copy() #there's no depth to request, so it's ok
        if request['predicate'] != 'biolink:related_to':
            original_predicate_element = tk.get_element(request['predicate'])
>           parent = tk.get_element(original_predicate_element['is_a'])
E           TypeError: 'NoneType' object is not subscriptable

test_onehops.py:97: TypeError
_ test_TRAPI_KPs[test_triples/KP/Text_Mining_Provider/Text_Mining_CO-OCCURRENCE_API.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'Text_Mining_CO-OCCURRENCE_API.json', 'location': 'test_triples/KP/Text_Mining_Provider/Text_Mining_CO-OCCURRENCE_API.json', 'object': 'UBERON:0000126', 'object_category': 'biolink:AnatomicalEntity', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Text_Mining_Provider/Text_Mining_CO-OCCURRENCE_API.json', 'case': {'subject_...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Text_Mining_CO-OCCURRENCE_API.json', 'location': 'test_triples/KP/Text_Mining_Provider/Text_Mining_CO-OCCURRENCE_API.json', 'object': 'UBERON:0000126', 'object_category': 'biolink:AnatomicalEntity', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Text_Mining_Provider/Text_Mining_CO-OCCURRENCE_API.json', 'case': {'subject_...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/5be0f321a829792e934545998b9c6afe/query
_ test_TRAPI_KPs[test_triples/KP/Text_Mining_Provider/Text_Mining_CO-OCCURRENCE_API.json_0-by_object] _

KP_TRAPI_case = {'api_name': 'Text_Mining_CO-OCCURRENCE_API.json', 'location': 'test_triples/KP/Text_Mining_Provider/Text_Mining_CO-OCCURRENCE_API.json', 'object': 'UBERON:0000126', 'object_category': 'biolink:AnatomicalEntity', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Text_Mining_Provider/Text_Mining_CO-OCCURRENCE_API.json', 'case': {'subject_...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Text_Mining_CO-OCCURRENCE_API.json', 'location': 'test_triples/KP/Text_Mining_Provider/Text_Mining_CO-OCCURRENCE_API.json', 'object': 'UBERON:0000126', 'object_category': 'biolink:AnatomicalEntity', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Text_Mining_Provider/Text_Mining_CO-OCCURRENCE_API.json', 'case': {'subject_...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/5be0f321a829792e934545998b9c6afe/query
_ test_TRAPI_KPs[test_triples/KP/Text_Mining_Provider/Text_Mining_CO-OCCURRENCE_API.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'Text_Mining_CO-OCCURRENCE_API.json', 'location': 'test_triples/KP/Text_Mining_Provider/Text_Mining_CO-OCCURRENCE_API.json', 'object': 'UBERON:0000126', 'object_category': 'biolink:AnatomicalEntity', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Text_Mining_Provider/Text_Mining_CO-OCCURRENCE_API.json', 'case': {'subject_...CCURRENCE_API.json', 'url': 'https://api.bte.ncats.io/v1/smartapi/5be0f321a829792e934545998b9c6afe', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_onehops.py:162: in execute_TRAPI_lookup
    TRAPI_request, output_element, output_node_binding = creator(case)
test_onehops.py:116: in raise_subject_entity
    parent_subject = ontology_kp.get_parent(subject, subject_cat)
ontology_kp.py:81: in get_parent
    preferred_parent = get_ontology_parent(query_entity,entity_type)
ontology_kp.py:62: in get_ontology_parent
    ancestors = get_ontology_ancestors(curie,btype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

curie = 'MONDO:0004315', btype = 'biolink:Disease'

    def get_ontology_ancestors(curie,btype):
        m ={
        "message": {
            "query_graph": {
                "nodes": {
                    "a": {
                        "id": curie
                    },
                    "b": {
                        "category": btype
                    }
                },
                "edges": {
                    "ab": {
                        "subject": "a",
                        "object": "b",
                        "predicate": "biolink:subclass_of"
                    }
                }
            }}}
        url = 'https://stars-app.renci.org/sparql-kp/query'
        response = post(url,m)
        original_prefix = curie.split(':')[0]
        ancestors = []
>       for result in response['message']['results']:
E       KeyError: 'message'

ontology_kp.py:46: KeyError
----------------------------- Captured stdout call -----------------------------
error: 502
_ test_TRAPI_KPs[test_triples/KP/Text_Mining_Provider/Text_Mining_CO-OCCURRENCE_API.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'Text_Mining_CO-OCCURRENCE_API.json', 'location': 'test_triples/KP/Text_Mining_Provider/Text_Mining_CO-OCCURRENCE_API.json', 'object': 'UBERON:0000126', 'object_category': 'biolink:AnatomicalEntity', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Text_Mining_Provider/Text_Mining_CO-OCCURRENCE_API.json', 'case': {'subject_...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Text_Mining_CO-OCCURRENCE_API.json', 'location': 'test_triples/KP/Text_Mining_Provider/Text_Mining_CO-OCCURRENCE_API.json', 'object': 'UBERON:0000126', 'object_category': 'biolink:AnatomicalEntity', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Text_Mining_Provider/Text_Mining_CO-OCCURRENCE_API.json', 'case': {'subject_...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/5be0f321a829792e934545998b9c6afe/query
_ test_TRAPI_KPs[test_triples/KP/Text_Mining_Provider/Text_Mining_CO-OCCURRENCE_API.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'Text_Mining_CO-OCCURRENCE_API.json', 'location': 'test_triples/KP/Text_Mining_Provider/Text_Mining_CO-OCCURRENCE_API.json', 'object': 'UBERON:0000126', 'object_category': 'biolink:AnatomicalEntity', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Text_Mining_Provider/Text_Mining_CO-OCCURRENCE_API.json', 'case': {'subject_...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Text_Mining_CO-OCCURRENCE_API.json', 'location': 'test_triples/KP/Text_Mining_Provider/Text_Mining_CO-OCCURRENCE_API.json', 'object': 'UBERON:0000126', 'object_category': 'biolink:AnatomicalEntity', ...}
creator = <function raise_predicate_by_subject at 0x1066904c0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Text_Mining_Provider/Text_Mining_CO-OCCURRENCE_API.json', 'case': {'subject_...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/5be0f321a829792e934545998b9c6afe/query
_ test_TRAPI_KPs[test_triples/KP/Clinical_Data_Provider/OpenPredict.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'OpenPredict.json', 'location': 'test_triples/KP/Clinical_Data_Provider/OpenPredict.json', 'object': 'OMIM:246300', 'object_category': 'biolink:Disease', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Clinical_Data_Provider/OpenPredict.json', 'case': {'subject_category': 'biol...{'a': {'category': 'biolink:Drug', 'id': 'DRUGBANK:DB00394'}, 'b': {'category': 'biolink:Disease'}}}, 'results': []}}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'OpenPredict.json', 'location': 'test_triples/KP/Clinical_Data_Provider/OpenPredict.json', 'object': 'OMIM:246300', 'object_category': 'biolink:Disease', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Clinical_Data_Provider/OpenPredict.json', 'case': {'subject_category': 'biol...{'a': {'category': 'biolink:Drug', 'id': 'DRUGBANK:DB00394'}, 'b': {'category': 'biolink:Disease'}}}, 'results': []}}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://openpredict.semanticscience.org/query
_ test_TRAPI_KPs[test_triples/KP/Clinical_Data_Provider/OpenPredict.json_0-by_object] _

KP_TRAPI_case = {'api_name': 'OpenPredict.json', 'location': 'test_triples/KP/Clinical_Data_Provider/OpenPredict.json', 'object': 'OMIM:246300', 'object_category': 'biolink:Disease', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Clinical_Data_Provider/OpenPredict.json', 'case': {'subject_category': 'biol...es': {'a': {'category': 'biolink:Drug'}, 'b': {'category': 'biolink:Disease', 'id': 'OMIM:246300'}}}, 'results': []}}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'OpenPredict.json', 'location': 'test_triples/KP/Clinical_Data_Provider/OpenPredict.json', 'object': 'OMIM:246300', 'object_category': 'biolink:Disease', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Clinical_Data_Provider/OpenPredict.json', 'case': {'subject_category': 'biol...es': {'a': {'category': 'biolink:Drug'}, 'b': {'category': 'biolink:Disease', 'id': 'OMIM:246300'}}}, 'results': []}}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://openpredict.semanticscience.org/query
_ test_TRAPI_KPs[test_triples/KP/Clinical_Data_Provider/OpenPredict.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'OpenPredict.json', 'location': 'test_triples/KP/Clinical_Data_Provider/OpenPredict.json', 'object': 'OMIM:246300', 'object_category': 'biolink:Disease', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Clinical_Data_Provider/OpenPredict.json', 'case': {'subject_category': 'biol...OpenPredict.json', 'api_name': 'OpenPredict.json', 'url': 'https://openpredict.semanticscience.org', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_onehops.py:162: in execute_TRAPI_lookup
    TRAPI_request, output_element, output_node_binding = creator(case)
test_onehops.py:116: in raise_subject_entity
    parent_subject = ontology_kp.get_parent(subject, subject_cat)
ontology_kp.py:81: in get_parent
    preferred_parent = get_ontology_parent(query_entity,entity_type)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

curie = 'CHEBI:3002', btype = 'biolink:Drug'

    def get_ontology_parent(curie,btype):
        #Here's a bunch of anscestors
        ancestors = get_ontology_ancestors(curie,btype)
        #Now, to get the one closest to the input, we see how many ancestors each ancestor has.  Largest number == lowest down
        ancount = []
        for anc in ancestors:
            second_ancestors = get_ontology_ancestors(anc,btype)
            ancount.append( (len(second_ancestors), anc))
        ancount.sort()
>       return ancount[-1][1]
E       IndexError: list index out of range

ontology_kp.py:69: IndexError
_ test_TRAPI_KPs[test_triples/KP/Clinical_Data_Provider/OpenPredict.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'OpenPredict.json', 'location': 'test_triples/KP/Clinical_Data_Provider/OpenPredict.json', 'object': 'OMIM:246300', 'object_category': 'biolink:Disease', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Clinical_Data_Provider/OpenPredict.json', 'case': {'subject_category': 'biol...'biolink:Drug', 'id': 'DRUGBANK:DB00394'}, 'b': {'category': 'biolink:DiseaseOrPhenotypicFeature'}}}, 'results': []}}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'OpenPredict.json', 'location': 'test_triples/KP/Clinical_Data_Provider/OpenPredict.json', 'object': 'OMIM:246300', 'object_category': 'biolink:Disease', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Clinical_Data_Provider/OpenPredict.json', 'case': {'subject_category': 'biol...'biolink:Drug', 'id': 'DRUGBANK:DB00394'}, 'b': {'category': 'biolink:DiseaseOrPhenotypicFeature'}}}, 'results': []}}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://openpredict.semanticscience.org/query
_ test_TRAPI_KPs[test_triples/KP/Clinical_Data_Provider/OpenPredict.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'OpenPredict.json', 'location': 'test_triples/KP/Clinical_Data_Provider/OpenPredict.json', 'object': 'OMIM:246300', 'object_category': 'biolink:Disease', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Clinical_Data_Provider/OpenPredict.json', 'case': {'subject_category': 'biol...{'a': {'category': 'biolink:Drug', 'id': 'DRUGBANK:DB00394'}, 'b': {'category': 'biolink:Disease'}}}, 'results': []}}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'OpenPredict.json', 'location': 'test_triples/KP/Clinical_Data_Provider/OpenPredict.json', 'object': 'OMIM:246300', 'object_category': 'biolink:Disease', ...}
creator = <function raise_predicate_by_subject at 0x1066904c0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Clinical_Data_Provider/OpenPredict.json', 'case': {'subject_category': 'biol...{'a': {'category': 'biolink:Drug', 'id': 'DRUGBANK:DB00394'}, 'b': {'category': 'biolink:Disease'}}}, 'results': []}}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://openpredict.semanticscience.org/query
_ test_TRAPI_KPs[test_triples/KP/Clinical_Data_Provider/Columbia_Open_Health_Data_(COHD).json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'Columbia_Open_Health_Data_(COHD).json', 'location': 'test_triples/KP/Clinical_Data_Provider/Columbia_Open_Health_Data_(COHD).json', 'object': 'PUBCHEM.COMPOUND:135565674', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Clinical_Data_Provider/Columbia_Open_Health_Data_(COHD).json', 'case': {'sub...knowledge_graph': {'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 400, 'response_json': None}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Columbia_Open_Health_Data_(COHD).json', 'location': 'test_triples/KP/Clinical_Data_Provider/Columbia_Open_Health_Data_(COHD).json', 'object': 'PUBCHEM.COMPOUND:135565674', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Clinical_Data_Provider/Columbia_Open_Health_Data_(COHD).json', 'case': {'sub...knowledge_graph': {'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 400, 'response_json': None}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 400 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
http://tr-kp-clinical.ncats.io/api/query
_ test_TRAPI_KPs[test_triples/KP/Clinical_Data_Provider/Columbia_Open_Health_Data_(COHD).json_0-by_object] _

KP_TRAPI_case = {'api_name': 'Columbia_Open_Health_Data_(COHD).json', 'location': 'test_triples/KP/Clinical_Data_Provider/Columbia_Open_Health_Data_(COHD).json', 'object': 'PUBCHEM.COMPOUND:135565674', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Clinical_Data_Provider/Columbia_Open_Health_Data_(COHD).json', 'case': {'sub...knowledge_graph': {'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 400, 'response_json': None}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Columbia_Open_Health_Data_(COHD).json', 'location': 'test_triples/KP/Clinical_Data_Provider/Columbia_Open_Health_Data_(COHD).json', 'object': 'PUBCHEM.COMPOUND:135565674', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Clinical_Data_Provider/Columbia_Open_Health_Data_(COHD).json', 'case': {'sub...knowledge_graph': {'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 400, 'response_json': None}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 400 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
http://tr-kp-clinical.ncats.io/api/query
_ test_TRAPI_KPs[test_triples/KP/Clinical_Data_Provider/Columbia_Open_Health_Data_(COHD).json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'Columbia_Open_Health_Data_(COHD).json', 'location': 'test_triples/KP/Clinical_Data_Provider/Columbia_Open_Health_Data_(COHD).json', 'object': 'PUBCHEM.COMPOUND:135565674', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Clinical_Data_Provider/Columbia_Open_Health_Data_(COHD).json', 'case': {'sub...', 'api_name': 'Columbia_Open_Health_Data_(COHD).json', 'url': 'http://tr-kp-clinical.ncats.io/api', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_onehops.py:162: in execute_TRAPI_lookup
    TRAPI_request, output_element, output_node_binding = creator(case)
test_onehops.py:116: in raise_subject_entity
    parent_subject = ontology_kp.get_parent(subject, subject_cat)
ontology_kp.py:81: in get_parent
    preferred_parent = get_ontology_parent(query_entity,entity_type)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

curie = 'CHEBI:50659', btype = 'biolink:ChemicalSubstance'

    def get_ontology_parent(curie,btype):
        #Here's a bunch of anscestors
        ancestors = get_ontology_ancestors(curie,btype)
        #Now, to get the one closest to the input, we see how many ancestors each ancestor has.  Largest number == lowest down
        ancount = []
        for anc in ancestors:
            second_ancestors = get_ontology_ancestors(anc,btype)
            ancount.append( (len(second_ancestors), anc))
        ancount.sort()
>       return ancount[-1][1]
E       IndexError: list index out of range

ontology_kp.py:69: IndexError
_ test_TRAPI_KPs[test_triples/KP/Clinical_Data_Provider/Columbia_Open_Health_Data_(COHD).json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'Columbia_Open_Health_Data_(COHD).json', 'location': 'test_triples/KP/Clinical_Data_Provider/Columbia_Open_Health_Data_(COHD).json', 'object': 'PUBCHEM.COMPOUND:135565674', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Clinical_Data_Provider/Columbia_Open_Health_Data_(COHD).json', 'case': {'sub...knowledge_graph': {'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 400, 'response_json': None}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Columbia_Open_Health_Data_(COHD).json', 'location': 'test_triples/KP/Clinical_Data_Provider/Columbia_Open_Health_Data_(COHD).json', 'object': 'PUBCHEM.COMPOUND:135565674', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Clinical_Data_Provider/Columbia_Open_Health_Data_(COHD).json', 'case': {'sub...knowledge_graph': {'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 400, 'response_json': None}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 400 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
http://tr-kp-clinical.ncats.io/api/query
_ test_TRAPI_KPs[test_triples/KP/Clinical_Data_Provider/Columbia_Open_Health_Data_(COHD).json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'Columbia_Open_Health_Data_(COHD).json', 'location': 'test_triples/KP/Clinical_Data_Provider/Columbia_Open_Health_Data_(COHD).json', 'object': 'PUBCHEM.COMPOUND:135565674', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Clinical_Data_Provider/Columbia_Open_Health_Data_(COHD).json', 'case': {'sub...knowledge_graph': {'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 400, 'response_json': None}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Columbia_Open_Health_Data_(COHD).json', 'location': 'test_triples/KP/Clinical_Data_Provider/Columbia_Open_Health_Data_(COHD).json', 'object': 'PUBCHEM.COMPOUND:135565674', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function raise_predicate_by_subject at 0x1066904c0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Clinical_Data_Provider/Columbia_Open_Health_Data_(COHD).json', 'case': {'sub...knowledge_graph': {'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 400, 'response_json': None}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 400 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
http://tr-kp-clinical.ncats.io/api/query
_ test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/Multiomics_Wellness_KP_API.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'Multiomics_Wellness_KP_API.json', 'location': 'test_triples/KP/Multiomics_Provider/Multiomics_Wellness_KP_API.json', 'object': 'HMDB:HMDB10405', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Multiomics_Provider/Multiomics_Wellness_KP_API.json', 'case': {'subject_cate...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Multiomics_Wellness_KP_API.json', 'location': 'test_triples/KP/Multiomics_Provider/Multiomics_Wellness_KP_API.json', 'object': 'HMDB:HMDB10405', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Multiomics_Provider/Multiomics_Wellness_KP_API.json', 'case': {'subject_cate...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/4974ebbf2c1ae31a25a7a7b2d9e4b0d4/query
_ test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/Multiomics_Wellness_KP_API.json_0-by_object] _

KP_TRAPI_case = {'api_name': 'Multiomics_Wellness_KP_API.json', 'location': 'test_triples/KP/Multiomics_Provider/Multiomics_Wellness_KP_API.json', 'object': 'HMDB:HMDB10405', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Multiomics_Provider/Multiomics_Wellness_KP_API.json', 'case': {'subject_cate...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Multiomics_Wellness_KP_API.json', 'location': 'test_triples/KP/Multiomics_Provider/Multiomics_Wellness_KP_API.json', 'object': 'HMDB:HMDB10405', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Multiomics_Provider/Multiomics_Wellness_KP_API.json', 'case': {'subject_cate...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/4974ebbf2c1ae31a25a7a7b2d9e4b0d4/query
_ test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/Multiomics_Wellness_KP_API.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'Multiomics_Wellness_KP_API.json', 'location': 'test_triples/KP/Multiomics_Provider/Multiomics_Wellness_KP_API.json', 'object': 'HMDB:HMDB10405', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Multiomics_Provider/Multiomics_Wellness_KP_API.json', 'case': {'subject_cate...llness_KP_API.json', 'url': 'https://api.bte.ncats.io/v1/smartapi/4974ebbf2c1ae31a25a7a7b2d9e4b0d4', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_onehops.py:162: in execute_TRAPI_lookup
    TRAPI_request, output_element, output_node_binding = creator(case)
test_onehops.py:116: in raise_subject_entity
    parent_subject = ontology_kp.get_parent(subject, subject_cat)
ontology_kp.py:78: in get_parent
    query_entity = convert_to_preferred(curie,preferred_prefixes)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

curie = 'PUBCHEM:9939941'
allowedlist = {'CHEBI', 'CL', 'EFO', 'HP', 'MONDO', 'NCIT', ...}

    def convert_to_preferred(curie,allowedlist):
        j = {'curies':[curie]}
        result = post('https://nodenormalization-sri.renci.org/get_normalized_nodes',j)
>       new_ids = [ v['identifier'] for v in result[curie]['equivalent_identifiers'] ]
E       TypeError: 'NoneType' object is not subscriptable

ontology_kp.py:16: TypeError
_ test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/Multiomics_Wellness_KP_API.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'Multiomics_Wellness_KP_API.json', 'location': 'test_triples/KP/Multiomics_Provider/Multiomics_Wellness_KP_API.json', 'object': 'HMDB:HMDB10405', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Multiomics_Provider/Multiomics_Wellness_KP_API.json', 'case': {'subject_cate...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Multiomics_Wellness_KP_API.json', 'location': 'test_triples/KP/Multiomics_Provider/Multiomics_Wellness_KP_API.json', 'object': 'HMDB:HMDB10405', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Multiomics_Provider/Multiomics_Wellness_KP_API.json', 'case': {'subject_cate...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/4974ebbf2c1ae31a25a7a7b2d9e4b0d4/query
_ test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/Multiomics_Wellness_KP_API.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'Multiomics_Wellness_KP_API.json', 'location': 'test_triples/KP/Multiomics_Provider/Multiomics_Wellness_KP_API.json', 'object': 'HMDB:HMDB10405', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Multiomics_Provider/Multiomics_Wellness_KP_API.json', 'case': {'subject_cate...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Multiomics_Wellness_KP_API.json', 'location': 'test_triples/KP/Multiomics_Provider/Multiomics_Wellness_KP_API.json', 'object': 'HMDB:HMDB10405', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function raise_predicate_by_subject at 0x1066904c0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Multiomics_Provider/Multiomics_Wellness_KP_API.json', 'case': {'subject_cate...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/4974ebbf2c1ae31a25a7a7b2d9e4b0d4/query
_ test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/TCGA_Mutation_Frequency_KP_API.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'TCGA_Mutation_Frequency_KP_API.json', 'location': 'test_triples/KP/Multiomics_Provider/TCGA_Mutation_Frequency_KP_API.json', 'object': 'NCBIGENE:2312', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Multiomics_Provider/TCGA_Mutation_Frequency_KP_API.json', 'case': {'subject_...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'TCGA_Mutation_Frequency_KP_API.json', 'location': 'test_triples/KP/Multiomics_Provider/TCGA_Mutation_Frequency_KP_API.json', 'object': 'NCBIGENE:2312', 'object_category': 'biolink:Gene', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Multiomics_Provider/TCGA_Mutation_Frequency_KP_API.json', 'case': {'subject_...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/5219cefb9d2b8d5df08c3a956fdd20f3/query
_ test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/TCGA_Mutation_Frequency_KP_API.json_0-by_object] _

KP_TRAPI_case = {'api_name': 'TCGA_Mutation_Frequency_KP_API.json', 'location': 'test_triples/KP/Multiomics_Provider/TCGA_Mutation_Frequency_KP_API.json', 'object': 'NCBIGENE:2312', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Multiomics_Provider/TCGA_Mutation_Frequency_KP_API.json', 'case': {'subject_...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'TCGA_Mutation_Frequency_KP_API.json', 'location': 'test_triples/KP/Multiomics_Provider/TCGA_Mutation_Frequency_KP_API.json', 'object': 'NCBIGENE:2312', 'object_category': 'biolink:Gene', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Multiomics_Provider/TCGA_Mutation_Frequency_KP_API.json', 'case': {'subject_...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/5219cefb9d2b8d5df08c3a956fdd20f3/query
_ test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/TCGA_Mutation_Frequency_KP_API.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'TCGA_Mutation_Frequency_KP_API.json', 'location': 'test_triples/KP/Multiomics_Provider/TCGA_Mutation_Frequency_KP_API.json', 'object': 'NCBIGENE:2312', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Multiomics_Provider/TCGA_Mutation_Frequency_KP_API.json', 'case': {'subject_...quency_KP_API.json', 'url': 'https://api.bte.ncats.io/v1/smartapi/5219cefb9d2b8d5df08c3a956fdd20f3', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_onehops.py:162: in execute_TRAPI_lookup
    TRAPI_request, output_element, output_node_binding = creator(case)
test_onehops.py:116: in raise_subject_entity
    parent_subject = ontology_kp.get_parent(subject, subject_cat)
ontology_kp.py:81: in get_parent
    preferred_parent = get_ontology_parent(query_entity,entity_type)
ontology_kp.py:62: in get_ontology_parent
    ancestors = get_ontology_ancestors(curie,btype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

curie = 'MONDO:0005097', btype = 'biolink:Disease'

    def get_ontology_ancestors(curie,btype):
        m ={
        "message": {
            "query_graph": {
                "nodes": {
                    "a": {
                        "id": curie
                    },
                    "b": {
                        "category": btype
                    }
                },
                "edges": {
                    "ab": {
                        "subject": "a",
                        "object": "b",
                        "predicate": "biolink:subclass_of"
                    }
                }
            }}}
        url = 'https://stars-app.renci.org/sparql-kp/query'
        response = post(url,m)
        original_prefix = curie.split(':')[0]
        ancestors = []
>       for result in response['message']['results']:
E       KeyError: 'message'

ontology_kp.py:46: KeyError
----------------------------- Captured stdout call -----------------------------
error: 502
_ test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/TCGA_Mutation_Frequency_KP_API.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'TCGA_Mutation_Frequency_KP_API.json', 'location': 'test_triples/KP/Multiomics_Provider/TCGA_Mutation_Frequency_KP_API.json', 'object': 'NCBIGENE:2312', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Multiomics_Provider/TCGA_Mutation_Frequency_KP_API.json', 'case': {'subject_...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'TCGA_Mutation_Frequency_KP_API.json', 'location': 'test_triples/KP/Multiomics_Provider/TCGA_Mutation_Frequency_KP_API.json', 'object': 'NCBIGENE:2312', 'object_category': 'biolink:Gene', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Multiomics_Provider/TCGA_Mutation_Frequency_KP_API.json', 'case': {'subject_...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/5219cefb9d2b8d5df08c3a956fdd20f3/query
_ test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/TCGA_Mutation_Frequency_KP_API.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'TCGA_Mutation_Frequency_KP_API.json', 'location': 'test_triples/KP/Multiomics_Provider/TCGA_Mutation_Frequency_KP_API.json', 'object': 'NCBIGENE:2312', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Multiomics_Provider/TCGA_Mutation_Frequency_KP_API.json', 'case': {'subject_...quency_KP_API.json', 'url': 'https://api.bte.ncats.io/v1/smartapi/5219cefb9d2b8d5df08c3a956fdd20f3', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_onehops.py:162: in execute_TRAPI_lookup
    TRAPI_request, output_element, output_node_binding = creator(case)
test_onehops.py:98: in raise_predicate_by_subject
    transformed_request['predicate'] = parent['slot_uri']
../../../../.virtualenvs/translator_testing/lib/python3.9/site-packages/jsonasobj2/_jsonobj.py:153: in __getitem__
    return super().__getitem__(item)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = ClassDefinition(name='gene to disease association', id_prefixes=[], definition_uri='https://w3id.org/biolink/vocab/Gen...biolink:GeneToDiseaseAssociation', subclass_of=None, union_of=[], defining_slots=['subject', 'object'], tree_root=None)
item = 'slot_uri'

    def __getitem__(self, item):
>       return self.__dict__[item]
E       KeyError: 'slot_uri'

../../../../.virtualenvs/translator_testing/lib/python3.9/site-packages/jsonasobj2/extendednamespace.py:20: KeyError
_ test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/Drug_Response_KP_API.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'Drug_Response_KP_API.json', 'location': 'test_triples/KP/Multiomics_Provider/Drug_Response_KP_API.json', 'object': 'PUBCHEM:644215', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Multiomics_Provider/Drug_Response_KP_API.json', 'case': {'subject_category':...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Drug_Response_KP_API.json', 'location': 'test_triples/KP/Multiomics_Provider/Drug_Response_KP_API.json', 'object': 'PUBCHEM:644215', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Multiomics_Provider/Drug_Response_KP_API.json', 'case': {'subject_category':...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/adf20dd6ff23dfe18e8e012bde686e31/query
_ test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/Drug_Response_KP_API.json_0-by_object] _

KP_TRAPI_case = {'api_name': 'Drug_Response_KP_API.json', 'location': 'test_triples/KP/Multiomics_Provider/Drug_Response_KP_API.json', 'object': 'PUBCHEM:644215', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Multiomics_Provider/Drug_Response_KP_API.json', 'case': {'subject_category':...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Drug_Response_KP_API.json', 'location': 'test_triples/KP/Multiomics_Provider/Drug_Response_KP_API.json', 'object': 'PUBCHEM:644215', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Multiomics_Provider/Drug_Response_KP_API.json', 'case': {'subject_category':...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/adf20dd6ff23dfe18e8e012bde686e31/query
_ test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/Drug_Response_KP_API.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'Drug_Response_KP_API.json', 'location': 'test_triples/KP/Multiomics_Provider/Drug_Response_KP_API.json', 'object': 'PUBCHEM:644215', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Multiomics_Provider/Drug_Response_KP_API.json', 'case': {'subject_category':...sponse_KP_API.json', 'url': 'https://api.bte.ncats.io/v1/smartapi/adf20dd6ff23dfe18e8e012bde686e31', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Drug_Response_KP_API.json', 'location': 'test_triples/KP/Multiomics_Provider/Drug_Response_KP_API.json', 'object': 'PUBCHEM:644215', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function raise_subject_entity at 0x1066905e0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Multiomics_Provider/Drug_Response_KP_API.json', 'case': {'subject_category':...sponse_KP_API.json', 'url': 'https://api.bte.ncats.io/v1/smartapi/adf20dd6ff23dfe18e8e012bde686e31', 'query_opts': {}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
>       TRAPI_request, output_element, output_node_binding = creator(case)
E       TypeError: cannot unpack non-iterable NoneType object

test_onehops.py:162: TypeError
----------------------------- Captured stdout call -----------------------------
No Parent:  NCBIGENE:2186
_ test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/Drug_Response_KP_API.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'Drug_Response_KP_API.json', 'location': 'test_triples/KP/Multiomics_Provider/Drug_Response_KP_API.json', 'object': 'PUBCHEM:644215', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Multiomics_Provider/Drug_Response_KP_API.json', 'case': {'subject_category':...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Drug_Response_KP_API.json', 'location': 'test_triples/KP/Multiomics_Provider/Drug_Response_KP_API.json', 'object': 'PUBCHEM:644215', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Multiomics_Provider/Drug_Response_KP_API.json', 'case': {'subject_category':...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/adf20dd6ff23dfe18e8e012bde686e31/query
_ test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/Drug_Response_KP_API.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'Drug_Response_KP_API.json', 'location': 'test_triples/KP/Multiomics_Provider/Drug_Response_KP_API.json', 'object': 'PUBCHEM:644215', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Multiomics_Provider/Drug_Response_KP_API.json', 'case': {'subject_category':...sponse_KP_API.json', 'url': 'https://api.bte.ncats.io/v1/smartapi/adf20dd6ff23dfe18e8e012bde686e31', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_onehops.py:162: in execute_TRAPI_lookup
    TRAPI_request, output_element, output_node_binding = creator(case)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

request = {'api_name': 'Drug_Response_KP_API.json', 'location': 'test_triples/KP/Multiomics_Provider/Drug_Response_KP_API.json', 'object': 'PUBCHEM:644215', 'object_category': 'biolink:ChemicalSubstance', ...}

    def raise_predicate_by_subject(request):
        """Given a known triple, create a TRAPI message that uses the parent of the original predicate and looks up
        the object by the subject"""
        transformed_request = request.copy() #there's no depth to request, so it's ok
        if request['predicate'] != 'biolink:related_to':
            original_predicate_element = tk.get_element(request['predicate'])
>           parent = tk.get_element(original_predicate_element['is_a'])
E           TypeError: 'NoneType' object is not subscriptable

test_onehops.py:97: TypeError
_ test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/Clinical_Risk_KP_API.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'Clinical_Risk_KP_API.json', 'location': 'test_triples/KP/Multiomics_Provider/Clinical_Risk_KP_API.json', 'object': 'MONDO:0002046', 'object_category': 'biolink:Disease', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Multiomics_Provider/Clinical_Risk_KP_API.json', 'case': {'subject_category':...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Clinical_Risk_KP_API.json', 'location': 'test_triples/KP/Multiomics_Provider/Clinical_Risk_KP_API.json', 'object': 'MONDO:0002046', 'object_category': 'biolink:Disease', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Multiomics_Provider/Clinical_Risk_KP_API.json', 'case': {'subject_category':...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/1bef5ecbb0b9aee90023ce9faa2c8974/query
_ test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/Clinical_Risk_KP_API.json_0-by_object] _

KP_TRAPI_case = {'api_name': 'Clinical_Risk_KP_API.json', 'location': 'test_triples/KP/Multiomics_Provider/Clinical_Risk_KP_API.json', 'object': 'MONDO:0002046', 'object_category': 'biolink:Disease', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Multiomics_Provider/Clinical_Risk_KP_API.json', 'case': {'subject_category':...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Clinical_Risk_KP_API.json', 'location': 'test_triples/KP/Multiomics_Provider/Clinical_Risk_KP_API.json', 'object': 'MONDO:0002046', 'object_category': 'biolink:Disease', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Multiomics_Provider/Clinical_Risk_KP_API.json', 'case': {'subject_category':...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/1bef5ecbb0b9aee90023ce9faa2c8974/query
_ test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/Clinical_Risk_KP_API.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'Clinical_Risk_KP_API.json', 'location': 'test_triples/KP/Multiomics_Provider/Clinical_Risk_KP_API.json', 'object': 'MONDO:0002046', 'object_category': 'biolink:Disease', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Multiomics_Provider/Clinical_Risk_KP_API.json', 'case': {'subject_category':...l_Risk_KP_API.json', 'url': 'https://api.bte.ncats.io/v1/smartapi/1bef5ecbb0b9aee90023ce9faa2c8974', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_onehops.py:162: in execute_TRAPI_lookup
    TRAPI_request, output_element, output_node_binding = creator(case)
test_onehops.py:116: in raise_subject_entity
    parent_subject = ontology_kp.get_parent(subject, subject_cat)
ontology_kp.py:81: in get_parent
    preferred_parent = get_ontology_parent(query_entity,entity_type)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

curie = 'MONDO:0005247', btype = 'biolink:Disease'

    def get_ontology_parent(curie,btype):
        #Here's a bunch of anscestors
        ancestors = get_ontology_ancestors(curie,btype)
        #Now, to get the one closest to the input, we see how many ancestors each ancestor has.  Largest number == lowest down
        ancount = []
        for anc in ancestors:
            second_ancestors = get_ontology_ancestors(anc,btype)
            ancount.append( (len(second_ancestors), anc))
        ancount.sort()
>       return ancount[-1][1]
E       IndexError: list index out of range

ontology_kp.py:69: IndexError
_ test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/Clinical_Risk_KP_API.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'Clinical_Risk_KP_API.json', 'location': 'test_triples/KP/Multiomics_Provider/Clinical_Risk_KP_API.json', 'object': 'MONDO:0002046', 'object_category': 'biolink:Disease', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Multiomics_Provider/Clinical_Risk_KP_API.json', 'case': {'subject_category':...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Clinical_Risk_KP_API.json', 'location': 'test_triples/KP/Multiomics_Provider/Clinical_Risk_KP_API.json', 'object': 'MONDO:0002046', 'object_category': 'biolink:Disease', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Multiomics_Provider/Clinical_Risk_KP_API.json', 'case': {'subject_category':...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/1bef5ecbb0b9aee90023ce9faa2c8974/query
_ test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/Clinical_Risk_KP_API.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'Clinical_Risk_KP_API.json', 'location': 'test_triples/KP/Multiomics_Provider/Clinical_Risk_KP_API.json', 'object': 'MONDO:0002046', 'object_category': 'biolink:Disease', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Multiomics_Provider/Clinical_Risk_KP_API.json', 'case': {'subject_category':...l_Risk_KP_API.json', 'url': 'https://api.bte.ncats.io/v1/smartapi/1bef5ecbb0b9aee90023ce9faa2c8974', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_onehops.py:162: in execute_TRAPI_lookup
    TRAPI_request, output_element, output_node_binding = creator(case)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

request = {'api_name': 'Clinical_Risk_KP_API.json', 'location': 'test_triples/KP/Multiomics_Provider/Clinical_Risk_KP_API.json', 'object': 'MONDO:0002046', 'object_category': 'biolink:Disease', ...}

    def raise_predicate_by_subject(request):
        """Given a known triple, create a TRAPI message that uses the parent of the original predicate and looks up
        the object by the subject"""
        transformed_request = request.copy() #there's no depth to request, so it's ok
        if request['predicate'] != 'biolink:related_to':
            original_predicate_element = tk.get_element(request['predicate'])
>           parent = tk.get_element(original_predicate_element['is_a'])
E           TypeError: 'NoneType' object is not subscriptable

test_onehops.py:97: TypeError
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Biolink.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Biolink.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Biolink.json', 'object': 'MONDO:0004989', 'object_category': 'biolink:Disease', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Biolink.json', 'case': {'subject_category': 'biolink:G...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Biolink.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Biolink.json', 'object': 'MONDO:0004989', 'object_category': 'biolink:Disease', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Biolink.json', 'case': {'subject_category': 'biolink:G...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/biolink/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Biolink.json_0-by_object] _

KP_TRAPI_case = {'api_name': 'Automat_Biolink.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Biolink.json', 'object': 'MONDO:0004989', 'object_category': 'biolink:Disease', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Biolink.json', 'case': {'subject_category': 'biolink:G...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Biolink.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Biolink.json', 'object': 'MONDO:0004989', 'object_category': 'biolink:Disease', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Biolink.json', 'case': {'subject_category': 'biolink:G...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/biolink/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Biolink.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'Automat_Biolink.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Biolink.json', 'object': 'MONDO:0004989', 'object_category': 'biolink:Disease', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Biolink.json', 'case': {'subject_category': 'biolink:G...tomat_Biolink.json', 'api_name': 'Automat_Biolink.json', 'url': 'https://automat.renci.org/biolink', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Biolink.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Biolink.json', 'object': 'MONDO:0004989', 'object_category': 'biolink:Disease', ...}
creator = <function raise_subject_entity at 0x1066905e0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Biolink.json', 'case': {'subject_category': 'biolink:G...tomat_Biolink.json', 'api_name': 'Automat_Biolink.json', 'url': 'https://automat.renci.org/biolink', 'query_opts': {}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
>       TRAPI_request, output_element, output_node_binding = creator(case)
E       TypeError: cannot unpack non-iterable NoneType object

test_onehops.py:162: TypeError
----------------------------- Captured stdout call -----------------------------
No Parent:  NCBIGene:118827818
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Biolink.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Biolink.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Biolink.json', 'object': 'MONDO:0004989', 'object_category': 'biolink:Disease', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Biolink.json', 'case': {'subject_category': 'biolink:G...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Biolink.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Biolink.json', 'object': 'MONDO:0004989', 'object_category': 'biolink:Disease', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Biolink.json', 'case': {'subject_category': 'biolink:G...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/biolink/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Biolink.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Biolink.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Biolink.json', 'object': 'MONDO:0004989', 'object_category': 'biolink:Disease', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Biolink.json', 'case': {'subject_category': 'biolink:G...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Biolink.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Biolink.json', 'object': 'MONDO:0004989', 'object_category': 'biolink:Disease', ...}
creator = <function raise_predicate_by_subject at 0x1066904c0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Biolink.json', 'case': {'subject_category': 'biolink:G...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/biolink/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_HGNC.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_HGNC.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_HGNC.json', 'object': 'HGNC.FAMILY:1993', 'object_category': 'biolink:GeneFamily', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_HGNC.json', 'case': {'subject_category': 'biolink:Gene...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_HGNC.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_HGNC.json', 'object': 'HGNC.FAMILY:1993', 'object_category': 'biolink:GeneFamily', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_HGNC.json', 'case': {'subject_category': 'biolink:Gene...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/hgnc/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_HGNC.json_0-by_object] __

KP_TRAPI_case = {'api_name': 'Automat_HGNC.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_HGNC.json', 'object': 'HGNC.FAMILY:1993', 'object_category': 'biolink:GeneFamily', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_HGNC.json', 'case': {'subject_category': 'biolink:Gene...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_HGNC.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_HGNC.json', 'object': 'HGNC.FAMILY:1993', 'object_category': 'biolink:GeneFamily', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_HGNC.json', 'case': {'subject_category': 'biolink:Gene...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/hgnc/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_HGNC.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'Automat_HGNC.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_HGNC.json', 'object': 'HGNC.FAMILY:1993', 'object_category': 'biolink:GeneFamily', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_HGNC.json', 'case': {'subject_category': 'biolink:Gene..._Agent/Automat_HGNC.json', 'api_name': 'Automat_HGNC.json', 'url': 'https://automat.renci.org/hgnc', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_HGNC.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_HGNC.json', 'object': 'HGNC.FAMILY:1993', 'object_category': 'biolink:GeneFamily', ...}
creator = <function raise_subject_entity at 0x1066905e0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_HGNC.json', 'case': {'subject_category': 'biolink:Gene..._Agent/Automat_HGNC.json', 'api_name': 'Automat_HGNC.json', 'url': 'https://automat.renci.org/hgnc', 'query_opts': {}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
>       TRAPI_request, output_element, output_node_binding = creator(case)
E       TypeError: cannot unpack non-iterable NoneType object

test_onehops.py:162: TypeError
----------------------------- Captured stdout call -----------------------------
No Parent:  NCBIGene:728882
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_HGNC.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_HGNC.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_HGNC.json', 'object': 'HGNC.FAMILY:1993', 'object_category': 'biolink:GeneFamily', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_HGNC.json', 'case': {'subject_category': 'biolink:Gene...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_HGNC.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_HGNC.json', 'object': 'HGNC.FAMILY:1993', 'object_category': 'biolink:GeneFamily', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_HGNC.json', 'case': {'subject_category': 'biolink:Gene...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/hgnc/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_HGNC.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_HGNC.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_HGNC.json', 'object': 'HGNC.FAMILY:1993', 'object_category': 'biolink:GeneFamily', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_HGNC.json', 'case': {'subject_category': 'biolink:Gene...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_HGNC.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_HGNC.json', 'object': 'HGNC.FAMILY:1993', 'object_category': 'biolink:GeneFamily', ...}
creator = <function raise_predicate_by_subject at 0x1066904c0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_HGNC.json', 'case': {'subject_category': 'biolink:Gene...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/hgnc/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_CTD.json_0-by_subject] __

KP_TRAPI_case = {'api_name': 'Automat_CTD.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_CTD.json', 'object': 'NCBIGene:3558', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_CTD.json', 'case': {'subject_category': 'biolink:Chemi...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_CTD.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_CTD.json', 'object': 'NCBIGene:3558', 'object_category': 'biolink:Gene', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_CTD.json', 'case': {'subject_category': 'biolink:Chemi...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/ctd/query
__ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_CTD.json_0-by_object] __

KP_TRAPI_case = {'api_name': 'Automat_CTD.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_CTD.json', 'object': 'NCBIGene:3558', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_CTD.json', 'case': {'subject_category': 'biolink:Chemi...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_CTD.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_CTD.json', 'object': 'NCBIGene:3558', 'object_category': 'biolink:Gene', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_CTD.json', 'case': {'subject_category': 'biolink:Chemi...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/ctd/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_CTD.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'Automat_CTD.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_CTD.json', 'object': 'NCBIGene:3558', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_CTD.json', 'case': {'subject_category': 'biolink:Chemi...ing_Agent/Automat_CTD.json', 'api_name': 'Automat_CTD.json', 'url': 'https://automat.renci.org/ctd', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_onehops.py:162: in execute_TRAPI_lookup
    TRAPI_request, output_element, output_node_binding = creator(case)
test_onehops.py:116: in raise_subject_entity
    parent_subject = ontology_kp.get_parent(subject, subject_cat)
ontology_kp.py:81: in get_parent
    preferred_parent = get_ontology_parent(query_entity,entity_type)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

curie = 'CHEBI:31823', btype = 'biolink:ChemicalSubstance'

    def get_ontology_parent(curie,btype):
        #Here's a bunch of anscestors
        ancestors = get_ontology_ancestors(curie,btype)
        #Now, to get the one closest to the input, we see how many ancestors each ancestor has.  Largest number == lowest down
        ancount = []
        for anc in ancestors:
            second_ancestors = get_ontology_ancestors(anc,btype)
            ancount.append( (len(second_ancestors), anc))
        ancount.sort()
>       return ancount[-1][1]
E       IndexError: list index out of range

ontology_kp.py:69: IndexError
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_CTD.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_CTD.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_CTD.json', 'object': 'NCBIGene:3558', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_CTD.json', 'case': {'subject_category': 'biolink:Chemi...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_CTD.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_CTD.json', 'object': 'NCBIGene:3558', 'object_category': 'biolink:Gene', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_CTD.json', 'case': {'subject_category': 'biolink:Chemi...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/ctd/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_CTD.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_CTD.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_CTD.json', 'object': 'NCBIGene:3558', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_CTD.json', 'case': {'subject_category': 'biolink:Chemi...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_CTD.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_CTD.json', 'object': 'NCBIGene:3558', 'object_category': 'biolink:Gene', ...}
creator = <function raise_predicate_by_subject at 0x1066904c0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_CTD.json', 'case': {'subject_category': 'biolink:Chemi...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/ctd/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_GTEx.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_GTEx.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_GTEx.json', 'object': 'NCBIGene:653635', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_GTEx.json', 'case': {'subject_category': 'biolink:Sequ...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_GTEx.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_GTEx.json', 'object': 'NCBIGene:653635', 'object_category': 'biolink:Gene', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_GTEx.json', 'case': {'subject_category': 'biolink:Sequ...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/gtex/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_GTEx.json_0-by_object] __

KP_TRAPI_case = {'api_name': 'Automat_GTEx.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_GTEx.json', 'object': 'NCBIGene:653635', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_GTEx.json', 'case': {'subject_category': 'biolink:Sequ...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_GTEx.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_GTEx.json', 'object': 'NCBIGene:653635', 'object_category': 'biolink:Gene', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_GTEx.json', 'case': {'subject_category': 'biolink:Sequ...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/gtex/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_GTEx.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'Automat_GTEx.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_GTEx.json', 'object': 'NCBIGene:653635', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_GTEx.json', 'case': {'subject_category': 'biolink:Sequ..._Agent/Automat_GTEx.json', 'api_name': 'Automat_GTEx.json', 'url': 'https://automat.renci.org/gtex', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_onehops.py:162: in execute_TRAPI_lookup
    TRAPI_request, output_element, output_node_binding = creator(case)
test_onehops.py:116: in raise_subject_entity
    parent_subject = ontology_kp.get_parent(subject, subject_cat)
ontology_kp.py:78: in get_parent
    query_entity = convert_to_preferred(curie,preferred_prefixes)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

curie = 'CAID:CA16727036'
allowedlist = {'CHEBI', 'CL', 'EFO', 'HP', 'MONDO', 'NCIT', ...}

    def convert_to_preferred(curie,allowedlist):
        j = {'curies':[curie]}
        result = post('https://nodenormalization-sri.renci.org/get_normalized_nodes',j)
>       new_ids = [ v['identifier'] for v in result[curie]['equivalent_identifiers'] ]
E       TypeError: 'NoneType' object is not subscriptable

ontology_kp.py:16: TypeError
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_GTEx.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_GTEx.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_GTEx.json', 'object': 'NCBIGene:653635', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_GTEx.json', 'case': {'subject_category': 'biolink:Sequ...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_GTEx.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_GTEx.json', 'object': 'NCBIGene:653635', 'object_category': 'biolink:Gene', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_GTEx.json', 'case': {'subject_category': 'biolink:Sequ...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/gtex/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_GTEx.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_GTEx.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_GTEx.json', 'object': 'NCBIGene:653635', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_GTEx.json', 'case': {'subject_category': 'biolink:Sequ...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_GTEx.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_GTEx.json', 'object': 'NCBIGene:653635', 'object_category': 'biolink:Gene', ...}
creator = <function raise_predicate_by_subject at 0x1066904c0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_GTEx.json', 'case': {'subject_category': 'biolink:Sequ...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/gtex/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Gtopdb.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Gtopdb.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Gtopdb.json', 'object': 'gtpo:6750', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Gtopdb.json', 'case': {'subject_category': 'biolink:Ch...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Gtopdb.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Gtopdb.json', 'object': 'gtpo:6750', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Gtopdb.json', 'case': {'subject_category': 'biolink:Ch...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/gtopdb/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Gtopdb.json_0-by_object] _

KP_TRAPI_case = {'api_name': 'Automat_Gtopdb.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Gtopdb.json', 'object': 'gtpo:6750', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Gtopdb.json', 'case': {'subject_category': 'biolink:Ch...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Gtopdb.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Gtopdb.json', 'object': 'gtpo:6750', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Gtopdb.json', 'case': {'subject_category': 'biolink:Ch...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/gtopdb/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Gtopdb.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'Automat_Gtopdb.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Gtopdb.json', 'object': 'gtpo:6750', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Gtopdb.json', 'case': {'subject_category': 'biolink:Ch.../Automat_Gtopdb.json', 'api_name': 'Automat_Gtopdb.json', 'url': 'https://automat.renci.org/gtopdb', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_onehops.py:162: in execute_TRAPI_lookup
    TRAPI_request, output_element, output_node_binding = creator(case)
test_onehops.py:116: in raise_subject_entity
    parent_subject = ontology_kp.get_parent(subject, subject_cat)
ontology_kp.py:78: in get_parent
    query_entity = convert_to_preferred(curie,preferred_prefixes)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

curie = 'DRUGBANK:DB09222'
allowedlist = {'CHEBI', 'CL', 'EFO', 'HP', 'MONDO', 'NCIT', ...}

    def convert_to_preferred(curie,allowedlist):
        j = {'curies':[curie]}
        result = post('https://nodenormalization-sri.renci.org/get_normalized_nodes',j)
>       new_ids = [ v['identifier'] for v in result[curie]['equivalent_identifiers'] ]
E       TypeError: 'NoneType' object is not subscriptable

ontology_kp.py:16: TypeError
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Gtopdb.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Gtopdb.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Gtopdb.json', 'object': 'gtpo:6750', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Gtopdb.json', 'case': {'subject_category': 'biolink:Ch...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Gtopdb.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Gtopdb.json', 'object': 'gtpo:6750', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Gtopdb.json', 'case': {'subject_category': 'biolink:Ch...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/gtopdb/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Gtopdb.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Gtopdb.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Gtopdb.json', 'object': 'gtpo:6750', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Gtopdb.json', 'case': {'subject_category': 'biolink:Ch...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Gtopdb.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Gtopdb.json', 'object': 'gtpo:6750', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function raise_predicate_by_subject at 0x1066904c0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Gtopdb.json', 'case': {'subject_category': 'biolink:Ch...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/gtopdb/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Chemical_normalization.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Chemical_normalization.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Chemical_normalization.json', 'object': 'CHEBI:33609', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Chemical_normalization.json', 'case': {'subject_catego...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Chemical_normalization.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Chemical_normalization.json', 'object': 'CHEBI:33609', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Chemical_normalization.json', 'case': {'subject_catego...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/chemical-normalization/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Chemical_normalization.json_0-by_object] _

KP_TRAPI_case = {'api_name': 'Automat_Chemical_normalization.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Chemical_normalization.json', 'object': 'CHEBI:33609', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Chemical_normalization.json', 'case': {'subject_catego...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Chemical_normalization.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Chemical_normalization.json', 'object': 'CHEBI:33609', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Chemical_normalization.json', 'case': {'subject_catego...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/chemical-normalization/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Chemical_normalization.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'Automat_Chemical_normalization.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Chemical_normalization.json', 'object': 'CHEBI:33609', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Chemical_normalization.json', 'case': {'subject_catego...': 'Automat_Chemical_normalization.json', 'url': 'https://automat.renci.org/chemical-normalization', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_onehops.py:162: in execute_TRAPI_lookup
    TRAPI_request, output_element, output_node_binding = creator(case)
test_onehops.py:116: in raise_subject_entity
    parent_subject = ontology_kp.get_parent(subject, subject_cat)
ontology_kp.py:81: in get_parent
    preferred_parent = get_ontology_parent(query_entity,entity_type)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

curie = 'CHEBI:50985', btype = 'biolink:ChemicalSubstance'

    def get_ontology_parent(curie,btype):
        #Here's a bunch of anscestors
        ancestors = get_ontology_ancestors(curie,btype)
        #Now, to get the one closest to the input, we see how many ancestors each ancestor has.  Largest number == lowest down
        ancount = []
        for anc in ancestors:
            second_ancestors = get_ontology_ancestors(anc,btype)
            ancount.append( (len(second_ancestors), anc))
        ancount.sort()
>       return ancount[-1][1]
E       IndexError: list index out of range

ontology_kp.py:69: IndexError
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Chemical_normalization.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Chemical_normalization.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Chemical_normalization.json', 'object': 'CHEBI:33609', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Chemical_normalization.json', 'case': {'subject_catego...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Chemical_normalization.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Chemical_normalization.json', 'object': 'CHEBI:33609', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Chemical_normalization.json', 'case': {'subject_catego...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/chemical-normalization/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Chemical_normalization.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Chemical_normalization.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Chemical_normalization.json', 'object': 'CHEBI:33609', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Chemical_normalization.json', 'case': {'subject_catego...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Chemical_normalization.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Chemical_normalization.json', 'object': 'CHEBI:33609', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function raise_predicate_by_subject at 0x1066904c0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Chemical_normalization.json', 'case': {'subject_catego...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/chemical-normalization/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_KEGG.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_KEGG.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_KEGG.json', 'object': 'CHEBI:30907', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_KEGG.json', 'case': {'subject_category': 'biolink:Chem...s': []}}, 'response': {'status_code': 404, 'response_json': {'error': 'No registered backend servers on /kegg/query'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_KEGG.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_KEGG.json', 'object': 'CHEBI:30907', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_KEGG.json', 'case': {'subject_category': 'biolink:Chem...s': []}}, 'response': {'status_code': 404, 'response_json': {'error': 'No registered backend servers on /kegg/query'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/kegg/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_KEGG.json_0-by_object] __

KP_TRAPI_case = {'api_name': 'Automat_KEGG.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_KEGG.json', 'object': 'CHEBI:30907', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_KEGG.json', 'case': {'subject_category': 'biolink:Chem...s': []}}, 'response': {'status_code': 404, 'response_json': {'error': 'No registered backend servers on /kegg/query'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_KEGG.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_KEGG.json', 'object': 'CHEBI:30907', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_KEGG.json', 'case': {'subject_category': 'biolink:Chem...s': []}}, 'response': {'status_code': 404, 'response_json': {'error': 'No registered backend servers on /kegg/query'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/kegg/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_KEGG.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'Automat_KEGG.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_KEGG.json', 'object': 'CHEBI:30907', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_KEGG.json', 'case': {'subject_category': 'biolink:Chem..._Agent/Automat_KEGG.json', 'api_name': 'Automat_KEGG.json', 'url': 'https://automat.renci.org/kegg', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_onehops.py:162: in execute_TRAPI_lookup
    TRAPI_request, output_element, output_node_binding = creator(case)
test_onehops.py:116: in raise_subject_entity
    parent_subject = ontology_kp.get_parent(subject, subject_cat)
ontology_kp.py:81: in get_parent
    preferred_parent = get_ontology_parent(query_entity,entity_type)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

curie = 'CHEBI:47904', btype = 'biolink:ChemicalSubstance'

    def get_ontology_parent(curie,btype):
        #Here's a bunch of anscestors
        ancestors = get_ontology_ancestors(curie,btype)
        #Now, to get the one closest to the input, we see how many ancestors each ancestor has.  Largest number == lowest down
        ancount = []
        for anc in ancestors:
            second_ancestors = get_ontology_ancestors(anc,btype)
            ancount.append( (len(second_ancestors), anc))
        ancount.sort()
>       return ancount[-1][1]
E       IndexError: list index out of range

ontology_kp.py:69: IndexError
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_KEGG.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_KEGG.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_KEGG.json', 'object': 'CHEBI:30907', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_KEGG.json', 'case': {'subject_category': 'biolink:Chem...s': []}}, 'response': {'status_code': 404, 'response_json': {'error': 'No registered backend servers on /kegg/query'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_KEGG.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_KEGG.json', 'object': 'CHEBI:30907', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_KEGG.json', 'case': {'subject_category': 'biolink:Chem...s': []}}, 'response': {'status_code': 404, 'response_json': {'error': 'No registered backend servers on /kegg/query'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/kegg/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_KEGG.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_KEGG.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_KEGG.json', 'object': 'CHEBI:30907', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_KEGG.json', 'case': {'subject_category': 'biolink:Chem...s': []}}, 'response': {'status_code': 404, 'response_json': {'error': 'No registered backend servers on /kegg/query'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_KEGG.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_KEGG.json', 'object': 'CHEBI:30907', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function raise_predicate_by_subject at 0x1066904c0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_KEGG.json', 'case': {'subject_category': 'biolink:Chem...s': []}}, 'response': {'status_code': 404, 'response_json': {'error': 'No registered backend servers on /kegg/query'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/kegg/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Viral_Proteome.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Viral_Proteome.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Viral_Proteome.json', 'object': 'NCBITaxon:401406', 'object_category': 'biolink:OrganismTaxon', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Viral_Proteome.json', 'case': {'subject_category': 'bi...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Viral_Proteome.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Viral_Proteome.json', 'object': 'NCBITaxon:401406', 'object_category': 'biolink:OrganismTaxon', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Viral_Proteome.json', 'case': {'subject_category': 'bi...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/viral-proteome/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Viral_Proteome.json_0-by_object] _

KP_TRAPI_case = {'api_name': 'Automat_Viral_Proteome.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Viral_Proteome.json', 'object': 'NCBITaxon:401406', 'object_category': 'biolink:OrganismTaxon', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Viral_Proteome.json', 'case': {'subject_category': 'bi...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Viral_Proteome.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Viral_Proteome.json', 'object': 'NCBITaxon:401406', 'object_category': 'biolink:OrganismTaxon', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Viral_Proteome.json', 'case': {'subject_category': 'bi...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/viral-proteome/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Viral_Proteome.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'Automat_Viral_Proteome.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Viral_Proteome.json', 'object': 'NCBITaxon:401406', 'object_category': 'biolink:OrganismTaxon', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Viral_Proteome.json', 'case': {'subject_category': 'bi...json', 'api_name': 'Automat_Viral_Proteome.json', 'url': 'https://automat.renci.org/viral-proteome', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Viral_Proteome.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Viral_Proteome.json', 'object': 'NCBITaxon:401406', 'object_category': 'biolink:OrganismTaxon', ...}
creator = <function raise_subject_entity at 0x1066905e0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Viral_Proteome.json', 'case': {'subject_category': 'bi...json', 'api_name': 'Automat_Viral_Proteome.json', 'url': 'https://automat.renci.org/viral-proteome', 'query_opts': {}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
>       TRAPI_request, output_element, output_node_binding = creator(case)
E       TypeError: cannot unpack non-iterable NoneType object

test_onehops.py:162: TypeError
----------------------------- Captured stdout call -----------------------------
No Parent:  UniProtKB:A3KCJ9
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Viral_Proteome.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Viral_Proteome.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Viral_Proteome.json', 'object': 'NCBITaxon:401406', 'object_category': 'biolink:OrganismTaxon', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Viral_Proteome.json', 'case': {'subject_category': 'bi...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Viral_Proteome.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Viral_Proteome.json', 'object': 'NCBITaxon:401406', 'object_category': 'biolink:OrganismTaxon', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Viral_Proteome.json', 'case': {'subject_category': 'bi...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/viral-proteome/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Viral_Proteome.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Viral_Proteome.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Viral_Proteome.json', 'object': 'NCBITaxon:401406', 'object_category': 'biolink:OrganismTaxon', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Viral_Proteome.json', 'case': {'subject_category': 'bi...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Viral_Proteome.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Viral_Proteome.json', 'object': 'NCBITaxon:401406', 'object_category': 'biolink:OrganismTaxon', ...}
creator = <function raise_predicate_by_subject at 0x1066904c0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Viral_Proteome.json', 'case': {'subject_category': 'bi...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/viral-proteome/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_MyChem.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_MyChem.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_MyChem.json', 'object': 'UMLS:C4523957', 'object_category': 'biolink:PhenotypicFeature', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_MyChem.json', 'case': {'subject_category': 'biolink:Ch...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_MyChem.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_MyChem.json', 'object': 'UMLS:C4523957', 'object_category': 'biolink:PhenotypicFeature', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_MyChem.json', 'case': {'subject_category': 'biolink:Ch...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/mychem/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_MyChem.json_0-by_object] _

KP_TRAPI_case = {'api_name': 'Automat_MyChem.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_MyChem.json', 'object': 'UMLS:C4523957', 'object_category': 'biolink:PhenotypicFeature', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_MyChem.json', 'case': {'subject_category': 'biolink:Ch...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_MyChem.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_MyChem.json', 'object': 'UMLS:C4523957', 'object_category': 'biolink:PhenotypicFeature', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_MyChem.json', 'case': {'subject_category': 'biolink:Ch...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/mychem/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_MyChem.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'Automat_MyChem.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_MyChem.json', 'object': 'UMLS:C4523957', 'object_category': 'biolink:PhenotypicFeature', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_MyChem.json', 'case': {'subject_category': 'biolink:Ch.../Automat_MyChem.json', 'api_name': 'Automat_MyChem.json', 'url': 'https://automat.renci.org/mychem', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_onehops.py:162: in execute_TRAPI_lookup
    TRAPI_request, output_element, output_node_binding = creator(case)
test_onehops.py:116: in raise_subject_entity
    parent_subject = ontology_kp.get_parent(subject, subject_cat)
ontology_kp.py:81: in get_parent
    preferred_parent = get_ontology_parent(query_entity,entity_type)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

curie = 'CHEBI:9620', btype = 'biolink:ChemicalSubstance'

    def get_ontology_parent(curie,btype):
        #Here's a bunch of anscestors
        ancestors = get_ontology_ancestors(curie,btype)
        #Now, to get the one closest to the input, we see how many ancestors each ancestor has.  Largest number == lowest down
        ancount = []
        for anc in ancestors:
            second_ancestors = get_ontology_ancestors(anc,btype)
            ancount.append( (len(second_ancestors), anc))
        ancount.sort()
>       return ancount[-1][1]
E       IndexError: list index out of range

ontology_kp.py:69: IndexError
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_MyChem.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_MyChem.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_MyChem.json', 'object': 'UMLS:C4523957', 'object_category': 'biolink:PhenotypicFeature', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_MyChem.json', 'case': {'subject_category': 'biolink:Ch...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_MyChem.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_MyChem.json', 'object': 'UMLS:C4523957', 'object_category': 'biolink:PhenotypicFeature', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_MyChem.json', 'case': {'subject_category': 'biolink:Ch...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/mychem/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_MyChem.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_MyChem.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_MyChem.json', 'object': 'UMLS:C4523957', 'object_category': 'biolink:PhenotypicFeature', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_MyChem.json', 'case': {'subject_category': 'biolink:Ch...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_MyChem.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_MyChem.json', 'object': 'UMLS:C4523957', 'object_category': 'biolink:PhenotypicFeature', ...}
creator = <function raise_predicate_by_subject at 0x1066904c0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_MyChem.json', 'case': {'subject_category': 'biolink:Ch...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/mychem/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Foodb.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Foodb.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Foodb.json', 'object': 'CHEMBL.COMPOUND:CHEMBL1866455', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Foodb.json', 'case': {'subject_category': 'biolink:Org...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Foodb.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Foodb.json', 'object': 'CHEMBL.COMPOUND:CHEMBL1866455', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Foodb.json', 'case': {'subject_category': 'biolink:Org...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/foodb/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Foodb.json_0-by_object] _

KP_TRAPI_case = {'api_name': 'Automat_Foodb.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Foodb.json', 'object': 'CHEMBL.COMPOUND:CHEMBL1866455', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Foodb.json', 'case': {'subject_category': 'biolink:Org...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Foodb.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Foodb.json', 'object': 'CHEMBL.COMPOUND:CHEMBL1866455', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Foodb.json', 'case': {'subject_category': 'biolink:Org...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/foodb/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Foodb.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'Automat_Foodb.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Foodb.json', 'object': 'CHEMBL.COMPOUND:CHEMBL1866455', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Foodb.json', 'case': {'subject_category': 'biolink:Org...ent/Automat_Foodb.json', 'api_name': 'Automat_Foodb.json', 'url': 'https://automat.renci.org/foodb', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Foodb.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Foodb.json', 'object': 'CHEMBL.COMPOUND:CHEMBL1866455', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function raise_subject_entity at 0x1066905e0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Foodb.json', 'case': {'subject_category': 'biolink:Org...ent/Automat_Foodb.json', 'api_name': 'Automat_Foodb.json', 'url': 'https://automat.renci.org/foodb', 'query_opts': {}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
>       TRAPI_request, output_element, output_node_binding = creator(case)
E       TypeError: cannot unpack non-iterable NoneType object

test_onehops.py:162: TypeError
----------------------------- Captured stdout call -----------------------------
No Parent:  NCBITaxon:105667
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Foodb.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Foodb.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Foodb.json', 'object': 'CHEMBL.COMPOUND:CHEMBL1866455', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Foodb.json', 'case': {'subject_category': 'biolink:Org...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Foodb.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Foodb.json', 'object': 'CHEMBL.COMPOUND:CHEMBL1866455', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Foodb.json', 'case': {'subject_category': 'biolink:Org...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/foodb/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Foodb.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Foodb.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Foodb.json', 'object': 'CHEMBL.COMPOUND:CHEMBL1866455', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Foodb.json', 'case': {'subject_category': 'biolink:Org...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Foodb.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Foodb.json', 'object': 'CHEMBL.COMPOUND:CHEMBL1866455', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function raise_predicate_by_subject at 0x1066904c0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Foodb.json', 'case': {'subject_category': 'biolink:Org...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/foodb/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Cord19_Scigraph.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Cord19_Scigraph.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Cord19_Scigraph.json', 'object': 'NCBIGene:367', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Cord19_Scigraph.json', 'case': {'subject_category': 'b...response': {'status_code': 404, 'response_json': {'error': 'No registered backend servers on /cord19-scigraph/query'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Cord19_Scigraph.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Cord19_Scigraph.json', 'object': 'NCBIGene:367', 'object_category': 'biolink:Gene', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Cord19_Scigraph.json', 'case': {'subject_category': 'b...response': {'status_code': 404, 'response_json': {'error': 'No registered backend servers on /cord19-scigraph/query'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/cord19-scigraph/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Cord19_Scigraph.json_0-by_object] _

KP_TRAPI_case = {'api_name': 'Automat_Cord19_Scigraph.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Cord19_Scigraph.json', 'object': 'NCBIGene:367', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Cord19_Scigraph.json', 'case': {'subject_category': 'b...response': {'status_code': 404, 'response_json': {'error': 'No registered backend servers on /cord19-scigraph/query'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Cord19_Scigraph.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Cord19_Scigraph.json', 'object': 'NCBIGene:367', 'object_category': 'biolink:Gene', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Cord19_Scigraph.json', 'case': {'subject_category': 'b...response': {'status_code': 404, 'response_json': {'error': 'No registered backend servers on /cord19-scigraph/query'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/cord19-scigraph/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Cord19_Scigraph.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'Automat_Cord19_Scigraph.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Cord19_Scigraph.json', 'object': 'NCBIGene:367', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Cord19_Scigraph.json', 'case': {'subject_category': 'b...on', 'api_name': 'Automat_Cord19_Scigraph.json', 'url': 'https://automat.renci.org/cord19-scigraph', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_onehops.py:162: in execute_TRAPI_lookup
    TRAPI_request, output_element, output_node_binding = creator(case)
test_onehops.py:116: in raise_subject_entity
    parent_subject = ontology_kp.get_parent(subject, subject_cat)
ontology_kp.py:81: in get_parent
    preferred_parent = get_ontology_parent(query_entity,entity_type)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

curie = 'CHEBI:52214', btype = 'biolink:ChemicalSubstance'

    def get_ontology_parent(curie,btype):
        #Here's a bunch of anscestors
        ancestors = get_ontology_ancestors(curie,btype)
        #Now, to get the one closest to the input, we see how many ancestors each ancestor has.  Largest number == lowest down
        ancount = []
        for anc in ancestors:
            second_ancestors = get_ontology_ancestors(anc,btype)
            ancount.append( (len(second_ancestors), anc))
        ancount.sort()
>       return ancount[-1][1]
E       IndexError: list index out of range

ontology_kp.py:69: IndexError
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Cord19_Scigraph.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Cord19_Scigraph.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Cord19_Scigraph.json', 'object': 'NCBIGene:367', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Cord19_Scigraph.json', 'case': {'subject_category': 'b...response': {'status_code': 404, 'response_json': {'error': 'No registered backend servers on /cord19-scigraph/query'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Cord19_Scigraph.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Cord19_Scigraph.json', 'object': 'NCBIGene:367', 'object_category': 'biolink:Gene', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Cord19_Scigraph.json', 'case': {'subject_category': 'b...response': {'status_code': 404, 'response_json': {'error': 'No registered backend servers on /cord19-scigraph/query'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/cord19-scigraph/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Cord19_Scigraph.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Cord19_Scigraph.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Cord19_Scigraph.json', 'object': 'NCBIGene:367', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Cord19_Scigraph.json', 'case': {'subject_category': 'b...response': {'status_code': 404, 'response_json': {'error': 'No registered backend servers on /cord19-scigraph/query'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Cord19_Scigraph.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Cord19_Scigraph.json', 'object': 'NCBIGene:367', 'object_category': 'biolink:Gene', ...}
creator = <function raise_predicate_by_subject at 0x1066904c0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Cord19_Scigraph.json', 'case': {'subject_category': 'b...response': {'status_code': 404, 'response_json': {'error': 'No registered backend servers on /cord19-scigraph/query'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/cord19-scigraph/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Pharos.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Pharos.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Pharos.json', 'object': 'NCBIGene:327', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Pharos.json', 'case': {'subject_category': 'biolink:Ch...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Pharos.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Pharos.json', 'object': 'NCBIGene:327', 'object_category': 'biolink:Gene', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Pharos.json', 'case': {'subject_category': 'biolink:Ch...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/pharos/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Pharos.json_0-by_object] _

KP_TRAPI_case = {'api_name': 'Automat_Pharos.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Pharos.json', 'object': 'NCBIGene:327', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Pharos.json', 'case': {'subject_category': 'biolink:Ch...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Pharos.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Pharos.json', 'object': 'NCBIGene:327', 'object_category': 'biolink:Gene', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Pharos.json', 'case': {'subject_category': 'biolink:Ch...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/pharos/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Pharos.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'Automat_Pharos.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Pharos.json', 'object': 'NCBIGene:327', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Pharos.json', 'case': {'subject_category': 'biolink:Ch.../Automat_Pharos.json', 'api_name': 'Automat_Pharos.json', 'url': 'https://automat.renci.org/pharos', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Pharos.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Pharos.json', 'object': 'NCBIGene:327', 'object_category': 'biolink:Gene', ...}
creator = <function raise_subject_entity at 0x1066905e0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Pharos.json', 'case': {'subject_category': 'biolink:Ch.../Automat_Pharos.json', 'api_name': 'Automat_Pharos.json', 'url': 'https://automat.renci.org/pharos', 'query_opts': {}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
>       TRAPI_request, output_element, output_node_binding = creator(case)
E       TypeError: cannot unpack non-iterable NoneType object

test_onehops.py:162: TypeError
----------------------------- Captured stdout call -----------------------------
No Parent:  CHEMBL.COMPOUND:CHEMBL2333026
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Pharos.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Pharos.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Pharos.json', 'object': 'NCBIGene:327', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Pharos.json', 'case': {'subject_category': 'biolink:Ch...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Pharos.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Pharos.json', 'object': 'NCBIGene:327', 'object_category': 'biolink:Gene', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Pharos.json', 'case': {'subject_category': 'biolink:Ch...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/pharos/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Pharos.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Pharos.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Pharos.json', 'object': 'NCBIGene:327', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Pharos.json', 'case': {'subject_category': 'biolink:Ch...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Pharos.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Pharos.json', 'object': 'NCBIGene:327', 'object_category': 'biolink:Gene', ...}
creator = <function raise_predicate_by_subject at 0x1066904c0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Pharos.json', 'case': {'subject_category': 'biolink:Ch...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/pharos/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Panther.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Panther.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Panther.json', 'object': 'PANTHER.FAMILY:PTHR34921', 'object_category': 'biolink:GeneFamily', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Panther.json', 'case': {'subject_category': 'biolink:G...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Panther.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Panther.json', 'object': 'PANTHER.FAMILY:PTHR34921', 'object_category': 'biolink:GeneFamily', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Panther.json', 'case': {'subject_category': 'biolink:G...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/panther/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Panther.json_0-by_object] _

KP_TRAPI_case = {'api_name': 'Automat_Panther.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Panther.json', 'object': 'PANTHER.FAMILY:PTHR34921', 'object_category': 'biolink:GeneFamily', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Panther.json', 'case': {'subject_category': 'biolink:G...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Panther.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Panther.json', 'object': 'PANTHER.FAMILY:PTHR34921', 'object_category': 'biolink:GeneFamily', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Panther.json', 'case': {'subject_category': 'biolink:G...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/panther/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Panther.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'Automat_Panther.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Panther.json', 'object': 'PANTHER.FAMILY:PTHR34921', 'object_category': 'biolink:GeneFamily', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Panther.json', 'case': {'subject_category': 'biolink:G...tomat_Panther.json', 'api_name': 'Automat_Panther.json', 'url': 'https://automat.renci.org/panther', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Panther.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Panther.json', 'object': 'PANTHER.FAMILY:PTHR34921', 'object_category': 'biolink:GeneFamily', ...}
creator = <function raise_subject_entity at 0x1066905e0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Panther.json', 'case': {'subject_category': 'biolink:G...tomat_Panther.json', 'api_name': 'Automat_Panther.json', 'url': 'https://automat.renci.org/panther', 'query_opts': {}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
>       TRAPI_request, output_element, output_node_binding = creator(case)
E       TypeError: cannot unpack non-iterable NoneType object

test_onehops.py:162: TypeError
----------------------------- Captured stdout call -----------------------------
No Parent:  PANTHER.FAMILY:PTHR34921:SF1
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Panther.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Panther.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Panther.json', 'object': 'PANTHER.FAMILY:PTHR34921', 'object_category': 'biolink:GeneFamily', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Panther.json', 'case': {'subject_category': 'biolink:G...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Panther.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Panther.json', 'object': 'PANTHER.FAMILY:PTHR34921', 'object_category': 'biolink:GeneFamily', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Panther.json', 'case': {'subject_category': 'biolink:G...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/panther/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Panther.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Panther.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Panther.json', 'object': 'PANTHER.FAMILY:PTHR34921', 'object_category': 'biolink:GeneFamily', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Panther.json', 'case': {'subject_category': 'biolink:G...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Panther.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Panther.json', 'object': 'PANTHER.FAMILY:PTHR34921', 'object_category': 'biolink:GeneFamily', ...}
creator = <function raise_predicate_by_subject at 0x1066904c0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Panther.json', 'case': {'subject_category': 'biolink:G...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/panther/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Ontological_Hierarchy.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Ontological_Hierarchy.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Ontological_Hierarchy.json', 'object': 'UBERON:0035769', 'object_category': 'biolink:AnatomicalEntity', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Ontological_Hierarchy.json', 'case': {'subject_categor...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Ontological_Hierarchy.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Ontological_Hierarchy.json', 'object': 'UBERON:0035769', 'object_category': 'biolink:AnatomicalEntity', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Ontological_Hierarchy.json', 'case': {'subject_categor...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/ontological-hierarchy/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Ontological_Hierarchy.json_0-by_object] _

KP_TRAPI_case = {'api_name': 'Automat_Ontological_Hierarchy.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Ontological_Hierarchy.json', 'object': 'UBERON:0035769', 'object_category': 'biolink:AnatomicalEntity', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Ontological_Hierarchy.json', 'case': {'subject_categor...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Ontological_Hierarchy.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Ontological_Hierarchy.json', 'object': 'UBERON:0035769', 'object_category': 'biolink:AnatomicalEntity', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Ontological_Hierarchy.json', 'case': {'subject_categor...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/ontological-hierarchy/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Ontological_Hierarchy.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'Automat_Ontological_Hierarchy.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Ontological_Hierarchy.json', 'object': 'UBERON:0035769', 'object_category': 'biolink:AnatomicalEntity', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Ontological_Hierarchy.json', 'case': {'subject_categor...me': 'Automat_Ontological_Hierarchy.json', 'url': 'https://automat.renci.org/ontological-hierarchy', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_onehops.py:162: in execute_TRAPI_lookup
    TRAPI_request, output_element, output_node_binding = creator(case)
test_onehops.py:116: in raise_subject_entity
    parent_subject = ontology_kp.get_parent(subject, subject_cat)
ontology_kp.py:81: in get_parent
    preferred_parent = get_ontology_parent(query_entity,entity_type)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

curie = 'UBERON:0005453', btype = 'biolink:AnatomicalEntity'

    def get_ontology_parent(curie,btype):
        #Here's a bunch of anscestors
        ancestors = get_ontology_ancestors(curie,btype)
        #Now, to get the one closest to the input, we see how many ancestors each ancestor has.  Largest number == lowest down
        ancount = []
        for anc in ancestors:
            second_ancestors = get_ontology_ancestors(anc,btype)
            ancount.append( (len(second_ancestors), anc))
        ancount.sort()
>       return ancount[-1][1]
E       IndexError: list index out of range

ontology_kp.py:69: IndexError
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Ontological_Hierarchy.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Ontological_Hierarchy.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Ontological_Hierarchy.json', 'object': 'UBERON:0035769', 'object_category': 'biolink:AnatomicalEntity', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Ontological_Hierarchy.json', 'case': {'subject_categor...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Ontological_Hierarchy.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Ontological_Hierarchy.json', 'object': 'UBERON:0035769', 'object_category': 'biolink:AnatomicalEntity', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Ontological_Hierarchy.json', 'case': {'subject_categor...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/ontological-hierarchy/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Ontological_Hierarchy.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Ontological_Hierarchy.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Ontological_Hierarchy.json', 'object': 'UBERON:0035769', 'object_category': 'biolink:AnatomicalEntity', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Ontological_Hierarchy.json', 'case': {'subject_categor...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Ontological_Hierarchy.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Ontological_Hierarchy.json', 'object': 'UBERON:0035769', 'object_category': 'biolink:AnatomicalEntity', ...}
creator = <function raise_predicate_by_subject at 0x1066904c0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Ontological_Hierarchy.json', 'case': {'subject_categor...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/ontological-hierarchy/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Uberongraph.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Uberongraph.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Uberongraph.json', 'object': 'UBERON:0001731', 'object_category': 'biolink:AnatomicalEntity', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Uberongraph.json', 'case': {'subject_category': 'bioli...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Uberongraph.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Uberongraph.json', 'object': 'UBERON:0001731', 'object_category': 'biolink:AnatomicalEntity', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Uberongraph.json', 'case': {'subject_category': 'bioli...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/uberongraph/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Uberongraph.json_0-by_object] _

KP_TRAPI_case = {'api_name': 'Automat_Uberongraph.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Uberongraph.json', 'object': 'UBERON:0001731', 'object_category': 'biolink:AnatomicalEntity', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Uberongraph.json', 'case': {'subject_category': 'bioli...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Uberongraph.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Uberongraph.json', 'object': 'UBERON:0001731', 'object_category': 'biolink:AnatomicalEntity', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Uberongraph.json', 'case': {'subject_category': 'bioli...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/uberongraph/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Uberongraph.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'Automat_Uberongraph.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Uberongraph.json', 'object': 'UBERON:0001731', 'object_category': 'biolink:AnatomicalEntity', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Uberongraph.json', 'case': {'subject_category': 'bioli...graph.json', 'api_name': 'Automat_Uberongraph.json', 'url': 'https://automat.renci.org/uberongraph', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_onehops.py:162: in execute_TRAPI_lookup
    TRAPI_request, output_element, output_node_binding = creator(case)
test_onehops.py:116: in raise_subject_entity
    parent_subject = ontology_kp.get_parent(subject, subject_cat)
ontology_kp.py:81: in get_parent
    preferred_parent = get_ontology_parent(query_entity,entity_type)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

curie = 'UBERON:0009959', btype = 'biolink:AnatomicalEntity'

    def get_ontology_parent(curie,btype):
        #Here's a bunch of anscestors
        ancestors = get_ontology_ancestors(curie,btype)
        #Now, to get the one closest to the input, we see how many ancestors each ancestor has.  Largest number == lowest down
        ancount = []
        for anc in ancestors:
            second_ancestors = get_ontology_ancestors(anc,btype)
            ancount.append( (len(second_ancestors), anc))
        ancount.sort()
>       return ancount[-1][1]
E       IndexError: list index out of range

ontology_kp.py:69: IndexError
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Uberongraph.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Uberongraph.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Uberongraph.json', 'object': 'UBERON:0001731', 'object_category': 'biolink:AnatomicalEntity', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Uberongraph.json', 'case': {'subject_category': 'bioli...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Uberongraph.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Uberongraph.json', 'object': 'UBERON:0001731', 'object_category': 'biolink:AnatomicalEntity', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Uberongraph.json', 'case': {'subject_category': 'bioli...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/uberongraph/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Uberongraph.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Uberongraph.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Uberongraph.json', 'object': 'UBERON:0001731', 'object_category': 'biolink:AnatomicalEntity', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Uberongraph.json', 'case': {'subject_category': 'bioli...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Uberongraph.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Uberongraph.json', 'object': 'UBERON:0001731', 'object_category': 'biolink:AnatomicalEntity', ...}
creator = <function raise_predicate_by_subject at 0x1066904c0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Uberongraph.json', 'case': {'subject_category': 'bioli...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/uberongraph/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_HMDB.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_HMDB.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_HMDB.json', 'object': 'NCBIGene:29974', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_HMDB.json', 'case': {'subject_category': 'biolink:Chem...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_HMDB.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_HMDB.json', 'object': 'NCBIGene:29974', 'object_category': 'biolink:Gene', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_HMDB.json', 'case': {'subject_category': 'biolink:Chem...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/hmdb/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_HMDB.json_0-by_object] __

KP_TRAPI_case = {'api_name': 'Automat_HMDB.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_HMDB.json', 'object': 'NCBIGene:29974', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_HMDB.json', 'case': {'subject_category': 'biolink:Chem...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_HMDB.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_HMDB.json', 'object': 'NCBIGene:29974', 'object_category': 'biolink:Gene', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_HMDB.json', 'case': {'subject_category': 'biolink:Chem...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/hmdb/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_HMDB.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'Automat_HMDB.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_HMDB.json', 'object': 'NCBIGene:29974', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_HMDB.json', 'case': {'subject_category': 'biolink:Chem..._Agent/Automat_HMDB.json', 'api_name': 'Automat_HMDB.json', 'url': 'https://automat.renci.org/hmdb', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_onehops.py:162: in execute_TRAPI_lookup
    TRAPI_request, output_element, output_node_binding = creator(case)
test_onehops.py:116: in raise_subject_entity
    parent_subject = ontology_kp.get_parent(subject, subject_cat)
ontology_kp.py:81: in get_parent
    preferred_parent = get_ontology_parent(query_entity,entity_type)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

curie = 'CHEBI:16040', btype = 'biolink:ChemicalSubstance'

    def get_ontology_parent(curie,btype):
        #Here's a bunch of anscestors
        ancestors = get_ontology_ancestors(curie,btype)
        #Now, to get the one closest to the input, we see how many ancestors each ancestor has.  Largest number == lowest down
        ancount = []
        for anc in ancestors:
            second_ancestors = get_ontology_ancestors(anc,btype)
            ancount.append( (len(second_ancestors), anc))
        ancount.sort()
>       return ancount[-1][1]
E       IndexError: list index out of range

ontology_kp.py:69: IndexError
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_HMDB.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_HMDB.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_HMDB.json', 'object': 'NCBIGene:29974', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_HMDB.json', 'case': {'subject_category': 'biolink:Chem...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_HMDB.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_HMDB.json', 'object': 'NCBIGene:29974', 'object_category': 'biolink:Gene', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_HMDB.json', 'case': {'subject_category': 'biolink:Chem...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/hmdb/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_HMDB.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_HMDB.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_HMDB.json', 'object': 'NCBIGene:29974', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_HMDB.json', 'case': {'subject_category': 'biolink:Chem...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_HMDB.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_HMDB.json', 'object': 'NCBIGene:29974', 'object_category': 'biolink:Gene', ...}
creator = <function raise_predicate_by_subject at 0x1066904c0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_HMDB.json', 'case': {'subject_category': 'biolink:Chem...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/hmdb/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Cord19_Scibite.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Cord19_Scibite.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Cord19_Scibite.json', 'object': 'CHEMBL.COMPOUND:CHEMBL1240832', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Cord19_Scibite.json', 'case': {'subject_category': 'bi...'response': {'status_code': 404, 'response_json': {'error': 'No registered backend servers on /cord19-scibite/query'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Cord19_Scibite.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Cord19_Scibite.json', 'object': 'CHEMBL.COMPOUND:CHEMBL1240832', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Cord19_Scibite.json', 'case': {'subject_category': 'bi...'response': {'status_code': 404, 'response_json': {'error': 'No registered backend servers on /cord19-scibite/query'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/cord19-scibite/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Cord19_Scibite.json_0-by_object] _

KP_TRAPI_case = {'api_name': 'Automat_Cord19_Scibite.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Cord19_Scibite.json', 'object': 'CHEMBL.COMPOUND:CHEMBL1240832', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Cord19_Scibite.json', 'case': {'subject_category': 'bi...'response': {'status_code': 404, 'response_json': {'error': 'No registered backend servers on /cord19-scibite/query'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Cord19_Scibite.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Cord19_Scibite.json', 'object': 'CHEMBL.COMPOUND:CHEMBL1240832', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Cord19_Scibite.json', 'case': {'subject_category': 'bi...'response': {'status_code': 404, 'response_json': {'error': 'No registered backend servers on /cord19-scibite/query'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/cord19-scibite/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Cord19_Scibite.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'Automat_Cord19_Scibite.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Cord19_Scibite.json', 'object': 'CHEMBL.COMPOUND:CHEMBL1240832', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Cord19_Scibite.json', 'case': {'subject_category': 'bi...json', 'api_name': 'Automat_Cord19_Scibite.json', 'url': 'https://automat.renci.org/cord19-scibite', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_onehops.py:162: in execute_TRAPI_lookup
    TRAPI_request, output_element, output_node_binding = creator(case)
test_onehops.py:116: in raise_subject_entity
    parent_subject = ontology_kp.get_parent(subject, subject_cat)
ontology_kp.py:81: in get_parent
    preferred_parent = get_ontology_parent(query_entity,entity_type)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

curie = 'CHEBI:2637', btype = 'biolink:ChemicalSubstance'

    def get_ontology_parent(curie,btype):
        #Here's a bunch of anscestors
        ancestors = get_ontology_ancestors(curie,btype)
        #Now, to get the one closest to the input, we see how many ancestors each ancestor has.  Largest number == lowest down
        ancount = []
        for anc in ancestors:
            second_ancestors = get_ontology_ancestors(anc,btype)
            ancount.append( (len(second_ancestors), anc))
        ancount.sort()
>       return ancount[-1][1]
E       IndexError: list index out of range

ontology_kp.py:69: IndexError
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Cord19_Scibite.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Cord19_Scibite.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Cord19_Scibite.json', 'object': 'CHEMBL.COMPOUND:CHEMBL1240832', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Cord19_Scibite.json', 'case': {'subject_category': 'bi...'response': {'status_code': 404, 'response_json': {'error': 'No registered backend servers on /cord19-scibite/query'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Cord19_Scibite.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Cord19_Scibite.json', 'object': 'CHEMBL.COMPOUND:CHEMBL1240832', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Cord19_Scibite.json', 'case': {'subject_category': 'bi...'response': {'status_code': 404, 'response_json': {'error': 'No registered backend servers on /cord19-scibite/query'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/cord19-scibite/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Cord19_Scibite.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Cord19_Scibite.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Cord19_Scibite.json', 'object': 'CHEMBL.COMPOUND:CHEMBL1240832', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Cord19_Scibite.json', 'case': {'subject_category': 'bi...'response': {'status_code': 404, 'response_json': {'error': 'No registered backend servers on /cord19-scibite/query'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Cord19_Scibite.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Cord19_Scibite.json', 'object': 'CHEMBL.COMPOUND:CHEMBL1240832', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function raise_predicate_by_subject at 0x1066904c0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Cord19_Scibite.json', 'case': {'subject_category': 'bi...'response': {'status_code': 404, 'response_json': {'error': 'No registered backend servers on /cord19-scibite/query'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/cord19-scibite/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Covid_Phenotypes.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Covid_Phenotypes.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Covid_Phenotypes.json', 'object': 'HP:0012735', 'object_category': 'biolink:PhenotypicFeature', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Covid_Phenotypes.json', 'case': {'subject_category': '...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Covid_Phenotypes.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Covid_Phenotypes.json', 'object': 'HP:0012735', 'object_category': 'biolink:PhenotypicFeature', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Covid_Phenotypes.json', 'case': {'subject_category': '...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/covid-phenotypes/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Covid_Phenotypes.json_0-by_object] _

KP_TRAPI_case = {'api_name': 'Automat_Covid_Phenotypes.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Covid_Phenotypes.json', 'object': 'HP:0012735', 'object_category': 'biolink:PhenotypicFeature', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Covid_Phenotypes.json', 'case': {'subject_category': '...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Covid_Phenotypes.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Covid_Phenotypes.json', 'object': 'HP:0012735', 'object_category': 'biolink:PhenotypicFeature', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Covid_Phenotypes.json', 'case': {'subject_category': '...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/covid-phenotypes/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Covid_Phenotypes.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'Automat_Covid_Phenotypes.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Covid_Phenotypes.json', 'object': 'HP:0012735', 'object_category': 'biolink:PhenotypicFeature', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Covid_Phenotypes.json', 'case': {'subject_category': '...', 'api_name': 'Automat_Covid_Phenotypes.json', 'url': 'https://automat.renci.org/covid-phenotypes', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_onehops.py:162: in execute_TRAPI_lookup
    TRAPI_request, output_element, output_node_binding = creator(case)
test_onehops.py:116: in raise_subject_entity
    parent_subject = ontology_kp.get_parent(subject, subject_cat)
ontology_kp.py:81: in get_parent
    preferred_parent = get_ontology_parent(query_entity,entity_type)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

curie = 'MONDO:0100096', btype = 'biolink:Disease'

    def get_ontology_parent(curie,btype):
        #Here's a bunch of anscestors
        ancestors = get_ontology_ancestors(curie,btype)
        #Now, to get the one closest to the input, we see how many ancestors each ancestor has.  Largest number == lowest down
        ancount = []
        for anc in ancestors:
            second_ancestors = get_ontology_ancestors(anc,btype)
            ancount.append( (len(second_ancestors), anc))
        ancount.sort()
>       return ancount[-1][1]
E       IndexError: list index out of range

ontology_kp.py:69: IndexError
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Covid_Phenotypes.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Covid_Phenotypes.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Covid_Phenotypes.json', 'object': 'HP:0012735', 'object_category': 'biolink:PhenotypicFeature', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Covid_Phenotypes.json', 'case': {'subject_category': '...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Covid_Phenotypes.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Covid_Phenotypes.json', 'object': 'HP:0012735', 'object_category': 'biolink:PhenotypicFeature', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Covid_Phenotypes.json', 'case': {'subject_category': '...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/covid-phenotypes/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Covid_Phenotypes.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Covid_Phenotypes.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Covid_Phenotypes.json', 'object': 'HP:0012735', 'object_category': 'biolink:PhenotypicFeature', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Covid_Phenotypes.json', 'case': {'subject_category': '...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Covid_Phenotypes.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Covid_Phenotypes.json', 'object': 'HP:0012735', 'object_category': 'biolink:PhenotypicFeature', ...}
creator = <function raise_predicate_by_subject at 0x1066904c0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Covid_Phenotypes.json', 'case': {'subject_category': '...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/covid-phenotypes/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Hetio.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Hetio.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Hetio.json', 'object': 'NCBIGene:83857', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Hetio.json', 'case': {'subject_category': 'biolink:Cel...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Hetio.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Hetio.json', 'object': 'NCBIGene:83857', 'object_category': 'biolink:Gene', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Hetio.json', 'case': {'subject_category': 'biolink:Cel...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/hetio/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Hetio.json_0-by_object] _

KP_TRAPI_case = {'api_name': 'Automat_Hetio.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Hetio.json', 'object': 'NCBIGene:83857', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Hetio.json', 'case': {'subject_category': 'biolink:Cel...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Hetio.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Hetio.json', 'object': 'NCBIGene:83857', 'object_category': 'biolink:Gene', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Hetio.json', 'case': {'subject_category': 'biolink:Cel...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/hetio/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Hetio.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'Automat_Hetio.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Hetio.json', 'object': 'NCBIGene:83857', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Hetio.json', 'case': {'subject_category': 'biolink:Cel...ent/Automat_Hetio.json', 'api_name': 'Automat_Hetio.json', 'url': 'https://automat.renci.org/hetio', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Hetio.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Hetio.json', 'object': 'NCBIGene:83857', 'object_category': 'biolink:Gene', ...}
creator = <function raise_subject_entity at 0x1066905e0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Hetio.json', 'case': {'subject_category': 'biolink:Cel...ent/Automat_Hetio.json', 'api_name': 'Automat_Hetio.json', 'url': 'https://automat.renci.org/hetio', 'query_opts': {}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
>       TRAPI_request, output_element, output_node_binding = creator(case)
E       TypeError: cannot unpack non-iterable NoneType object

test_onehops.py:162: TypeError
----------------------------- Captured stdout call -----------------------------
No Parent:  GO:0044309
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Hetio.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Hetio.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Hetio.json', 'object': 'NCBIGene:83857', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Hetio.json', 'case': {'subject_category': 'biolink:Cel...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Hetio.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Hetio.json', 'object': 'NCBIGene:83857', 'object_category': 'biolink:Gene', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Hetio.json', 'case': {'subject_category': 'biolink:Cel...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/hetio/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Hetio.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Hetio.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Hetio.json', 'object': 'NCBIGene:83857', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Hetio.json', 'case': {'subject_category': 'biolink:Cel...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Hetio.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Hetio.json', 'object': 'NCBIGene:83857', 'object_category': 'biolink:Gene', ...}
creator = <function raise_predicate_by_subject at 0x1066904c0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Hetio.json', 'case': {'subject_category': 'biolink:Cel...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/hetio/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_IntAct.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_IntAct.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_IntAct.json', 'object': 'NCBITaxon:796210', 'object_category': 'biolink:OrganismTaxon', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_IntAct.json', 'case': {'subject_category': 'biolink:Ge...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_IntAct.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_IntAct.json', 'object': 'NCBITaxon:796210', 'object_category': 'biolink:OrganismTaxon', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_IntAct.json', 'case': {'subject_category': 'biolink:Ge...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/intact/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_IntAct.json_0-by_object] _

KP_TRAPI_case = {'api_name': 'Automat_IntAct.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_IntAct.json', 'object': 'NCBITaxon:796210', 'object_category': 'biolink:OrganismTaxon', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_IntAct.json', 'case': {'subject_category': 'biolink:Ge...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_IntAct.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_IntAct.json', 'object': 'NCBITaxon:796210', 'object_category': 'biolink:OrganismTaxon', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_IntAct.json', 'case': {'subject_category': 'biolink:Ge...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/intact/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_IntAct.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'Automat_IntAct.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_IntAct.json', 'object': 'NCBITaxon:796210', 'object_category': 'biolink:OrganismTaxon', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_IntAct.json', 'case': {'subject_category': 'biolink:Ge.../Automat_IntAct.json', 'api_name': 'Automat_IntAct.json', 'url': 'https://automat.renci.org/intact', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_IntAct.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_IntAct.json', 'object': 'NCBITaxon:796210', 'object_category': 'biolink:OrganismTaxon', ...}
creator = <function raise_subject_entity at 0x1066905e0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_IntAct.json', 'case': {'subject_category': 'biolink:Ge.../Automat_IntAct.json', 'api_name': 'Automat_IntAct.json', 'url': 'https://automat.renci.org/intact', 'query_opts': {}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
>       TRAPI_request, output_element, output_node_binding = creator(case)
E       TypeError: cannot unpack non-iterable NoneType object

test_onehops.py:162: TypeError
----------------------------- Captured stdout call -----------------------------
No Parent:  UniProtKB:Q8JPQ9
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_IntAct.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_IntAct.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_IntAct.json', 'object': 'NCBITaxon:796210', 'object_category': 'biolink:OrganismTaxon', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_IntAct.json', 'case': {'subject_category': 'biolink:Ge...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_IntAct.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_IntAct.json', 'object': 'NCBITaxon:796210', 'object_category': 'biolink:OrganismTaxon', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_IntAct.json', 'case': {'subject_category': 'biolink:Ge...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/intact/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_IntAct.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_IntAct.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_IntAct.json', 'object': 'NCBITaxon:796210', 'object_category': 'biolink:OrganismTaxon', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_IntAct.json', 'case': {'subject_category': 'biolink:Ge...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_IntAct.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_IntAct.json', 'object': 'NCBITaxon:796210', 'object_category': 'biolink:OrganismTaxon', ...}
creator = <function raise_predicate_by_subject at 0x1066904c0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_IntAct.json', 'case': {'subject_category': 'biolink:Ge...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/intact/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Human_GOA.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Human_GOA.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Human_GOA.json', 'object': 'GO:0006629', 'object_category': 'biolink:BiologicalProcess', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Human_GOA.json', 'case': {'subject_category': 'biolink...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Human_GOA.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Human_GOA.json', 'object': 'GO:0006629', 'object_category': 'biolink:BiologicalProcess', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Human_GOA.json', 'case': {'subject_category': 'biolink...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/human-goa/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Human_GOA.json_0-by_object] _

KP_TRAPI_case = {'api_name': 'Automat_Human_GOA.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Human_GOA.json', 'object': 'GO:0006629', 'object_category': 'biolink:BiologicalProcess', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Human_GOA.json', 'case': {'subject_category': 'biolink...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Human_GOA.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Human_GOA.json', 'object': 'GO:0006629', 'object_category': 'biolink:BiologicalProcess', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Human_GOA.json', 'case': {'subject_category': 'biolink...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/human-goa/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Human_GOA.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'Automat_Human_GOA.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Human_GOA.json', 'object': 'GO:0006629', 'object_category': 'biolink:BiologicalProcess', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Human_GOA.json', 'case': {'subject_category': 'biolink...Human_GOA.json', 'api_name': 'Automat_Human_GOA.json', 'url': 'https://automat.renci.org/human-goa', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Human_GOA.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Human_GOA.json', 'object': 'GO:0006629', 'object_category': 'biolink:BiologicalProcess', ...}
creator = <function raise_subject_entity at 0x1066905e0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Human_GOA.json', 'case': {'subject_category': 'biolink...Human_GOA.json', 'api_name': 'Automat_Human_GOA.json', 'url': 'https://automat.renci.org/human-goa', 'query_opts': {}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
>       TRAPI_request, output_element, output_node_binding = creator(case)
E       TypeError: cannot unpack non-iterable NoneType object

test_onehops.py:162: TypeError
----------------------------- Captured stdout call -----------------------------
No Parent:  NCBIGene:3949
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Human_GOA.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Human_GOA.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Human_GOA.json', 'object': 'GO:0006629', 'object_category': 'biolink:BiologicalProcess', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Human_GOA.json', 'case': {'subject_category': 'biolink...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Human_GOA.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Human_GOA.json', 'object': 'GO:0006629', 'object_category': 'biolink:BiologicalProcess', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Human_GOA.json', 'case': {'subject_category': 'biolink...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/human-goa/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Human_GOA.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Human_GOA.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Human_GOA.json', 'object': 'GO:0006629', 'object_category': 'biolink:BiologicalProcess', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Human_GOA.json', 'case': {'subject_category': 'biolink...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Human_GOA.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Human_GOA.json', 'object': 'GO:0006629', 'object_category': 'biolink:BiologicalProcess', ...}
creator = <function raise_predicate_by_subject at 0x1066904c0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Human_GOA.json', 'case': {'subject_category': 'biolink...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/human-goa/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Chembio.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Chembio.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Chembio.json', 'object': 'NCBIGene:2', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Chembio.json', 'case': {'subject_category': 'biolink:C... []}}, 'response': {'status_code': 404, 'response_json': {'error': 'No registered backend servers on /chembio/query'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Chembio.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Chembio.json', 'object': 'NCBIGene:2', 'object_category': 'biolink:Gene', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Chembio.json', 'case': {'subject_category': 'biolink:C... []}}, 'response': {'status_code': 404, 'response_json': {'error': 'No registered backend servers on /chembio/query'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/chembio/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Chembio.json_0-by_object] _

KP_TRAPI_case = {'api_name': 'Automat_Chembio.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Chembio.json', 'object': 'NCBIGene:2', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Chembio.json', 'case': {'subject_category': 'biolink:C... []}}, 'response': {'status_code': 404, 'response_json': {'error': 'No registered backend servers on /chembio/query'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Chembio.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Chembio.json', 'object': 'NCBIGene:2', 'object_category': 'biolink:Gene', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Chembio.json', 'case': {'subject_category': 'biolink:C... []}}, 'response': {'status_code': 404, 'response_json': {'error': 'No registered backend servers on /chembio/query'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/chembio/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Chembio.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'Automat_Chembio.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Chembio.json', 'object': 'NCBIGene:2', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Chembio.json', 'case': {'subject_category': 'biolink:C...tomat_Chembio.json', 'api_name': 'Automat_Chembio.json', 'url': 'https://automat.renci.org/chembio', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_onehops.py:162: in execute_TRAPI_lookup
    TRAPI_request, output_element, output_node_binding = creator(case)
test_onehops.py:116: in raise_subject_entity
    parent_subject = ontology_kp.get_parent(subject, subject_cat)
ontology_kp.py:81: in get_parent
    preferred_parent = get_ontology_parent(query_entity,entity_type)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

curie = 'CHEBI:3767', btype = 'biolink:ChemicalSubstance'

    def get_ontology_parent(curie,btype):
        #Here's a bunch of anscestors
        ancestors = get_ontology_ancestors(curie,btype)
        #Now, to get the one closest to the input, we see how many ancestors each ancestor has.  Largest number == lowest down
        ancount = []
        for anc in ancestors:
            second_ancestors = get_ontology_ancestors(anc,btype)
            ancount.append( (len(second_ancestors), anc))
        ancount.sort()
>       return ancount[-1][1]
E       IndexError: list index out of range

ontology_kp.py:69: IndexError
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Chembio.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Chembio.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Chembio.json', 'object': 'NCBIGene:2', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Chembio.json', 'case': {'subject_category': 'biolink:C... []}}, 'response': {'status_code': 404, 'response_json': {'error': 'No registered backend servers on /chembio/query'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Chembio.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Chembio.json', 'object': 'NCBIGene:2', 'object_category': 'biolink:Gene', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Chembio.json', 'case': {'subject_category': 'biolink:C... []}}, 'response': {'status_code': 404, 'response_json': {'error': 'No registered backend servers on /chembio/query'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/chembio/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Chembio.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Chembio.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Chembio.json', 'object': 'NCBIGene:2', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Chembio.json', 'case': {'subject_category': 'biolink:C... []}}, 'response': {'status_code': 404, 'response_json': {'error': 'No registered backend servers on /chembio/query'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Chembio.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Chembio.json', 'object': 'NCBIGene:2', 'object_category': 'biolink:Gene', ...}
creator = <function raise_predicate_by_subject at 0x1066904c0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Chembio.json', 'case': {'subject_category': 'biolink:C... []}}, 'response': {'status_code': 404, 'response_json': {'error': 'No registered backend servers on /chembio/query'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/chembio/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Textmining_KP.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Textmining_KP.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Textmining_KP.json', 'object': 'UBERON:0005156', 'object_category': 'biolink:AnatomicalEntity', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Textmining_KP.json', 'case': {'subject_category': 'bio...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Textmining_KP.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Textmining_KP.json', 'object': 'UBERON:0005156', 'object_category': 'biolink:AnatomicalEntity', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Textmining_KP.json', 'case': {'subject_category': 'bio...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/textminingkp/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Textmining_KP.json_0-by_object] _

KP_TRAPI_case = {'api_name': 'Automat_Textmining_KP.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Textmining_KP.json', 'object': 'UBERON:0005156', 'object_category': 'biolink:AnatomicalEntity', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Textmining_KP.json', 'case': {'subject_category': 'bio...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Textmining_KP.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Textmining_KP.json', 'object': 'UBERON:0005156', 'object_category': 'biolink:AnatomicalEntity', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Textmining_KP.json', 'case': {'subject_category': 'bio...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/textminingkp/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Textmining_KP.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'Automat_Textmining_KP.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Textmining_KP.json', 'object': 'UBERON:0005156', 'object_category': 'biolink:AnatomicalEntity', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Textmining_KP.json', 'case': {'subject_category': 'bio...KP.json', 'api_name': 'Automat_Textmining_KP.json', 'url': 'https://automat.renci.org/textminingkp', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Textmining_KP.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Textmining_KP.json', 'object': 'UBERON:0005156', 'object_category': 'biolink:AnatomicalEntity', ...}
creator = <function raise_subject_entity at 0x1066905e0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Textmining_KP.json', 'case': {'subject_category': 'bio...KP.json', 'api_name': 'Automat_Textmining_KP.json', 'url': 'https://automat.renci.org/textminingkp', 'query_opts': {}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
>       TRAPI_request, output_element, output_node_binding = creator(case)
E       TypeError: cannot unpack non-iterable NoneType object

test_onehops.py:162: TypeError
----------------------------- Captured stdout call -----------------------------
No Parent:  PR:000029351
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Textmining_KP.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Textmining_KP.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Textmining_KP.json', 'object': 'UBERON:0005156', 'object_category': 'biolink:AnatomicalEntity', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Textmining_KP.json', 'case': {'subject_category': 'bio...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Textmining_KP.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Textmining_KP.json', 'object': 'UBERON:0005156', 'object_category': 'biolink:AnatomicalEntity', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Textmining_KP.json', 'case': {'subject_category': 'bio...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/textminingkp/query
_ test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Textmining_KP.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'Automat_Textmining_KP.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Textmining_KP.json', 'object': 'UBERON:0005156', 'object_category': 'biolink:AnatomicalEntity', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Textmining_KP.json', 'case': {'subject_category': 'bio...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Automat_Textmining_KP.json', 'location': 'test_triples/KP/Ranking_Agent/Automat_Textmining_KP.json', 'object': 'UBERON:0005156', 'object_category': 'biolink:AnatomicalEntity', ...}
creator = <function raise_predicate_by_subject at 0x1066904c0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Ranking_Agent/Automat_Textmining_KP.json', 'case': {'subject_category': 'bio...'nodes': {}, 'edges': {}}, 'results': []}}, 'response': {'status_code': 404, 'response_json': {'detail': 'Not Found'}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
>       assert TRAPI_response['status_code'] == 200
E       assert 404 == 200

test_onehops.py:173: AssertionError
----------------------------- Captured stdout call -----------------------------
https://automat.renci.org/textminingkp/query
_ test_TRAPI_KPs[test_triples/KP/Service_Provider/mydisease.info_API.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'mydisease.info_API.json', 'location': 'test_triples/KP/Service_Provider/mydisease.info_API.json', 'object': 'NCBIGene:4694', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/mydisease.info_API.json', 'case': {'subject_category': 'bio...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'mydisease.info_API.json', 'location': 'test_triples/KP/Service_Provider/mydisease.info_API.json', 'object': 'NCBIGene:4694', 'object_category': 'biolink:Gene', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/mydisease.info_API.json', 'case': {'subject_category': 'bio...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/671b45c0301c8624abbd26ae78449ca2/query
_ test_TRAPI_KPs[test_triples/KP/Service_Provider/mydisease.info_API.json_0-by_object] _

KP_TRAPI_case = {'api_name': 'mydisease.info_API.json', 'location': 'test_triples/KP/Service_Provider/mydisease.info_API.json', 'object': 'NCBIGene:4694', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/mydisease.info_API.json', 'case': {'subject_category': 'bio...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'mydisease.info_API.json', 'location': 'test_triples/KP/Service_Provider/mydisease.info_API.json', 'object': 'NCBIGene:4694', 'object_category': 'biolink:Gene', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/mydisease.info_API.json', 'case': {'subject_category': 'bio...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/671b45c0301c8624abbd26ae78449ca2/query
_ test_TRAPI_KPs[test_triples/KP/Service_Provider/mydisease.info_API.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'mydisease.info_API.json', 'location': 'test_triples/KP/Service_Provider/mydisease.info_API.json', 'object': 'NCBIGene:4694', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/mydisease.info_API.json', 'case': {'subject_category': 'bio...ease.info_API.json', 'url': 'https://api.bte.ncats.io/v1/smartapi/671b45c0301c8624abbd26ae78449ca2', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_onehops.py:162: in execute_TRAPI_lookup
    TRAPI_request, output_element, output_node_binding = creator(case)
test_onehops.py:116: in raise_subject_entity
    parent_subject = ontology_kp.get_parent(subject, subject_cat)
ontology_kp.py:81: in get_parent
    preferred_parent = get_ontology_parent(query_entity,entity_type)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

curie = 'MONDO:0009723', btype = 'biolink:Disease'

    def get_ontology_parent(curie,btype):
        #Here's a bunch of anscestors
        ancestors = get_ontology_ancestors(curie,btype)
        #Now, to get the one closest to the input, we see how many ancestors each ancestor has.  Largest number == lowest down
        ancount = []
        for anc in ancestors:
            second_ancestors = get_ontology_ancestors(anc,btype)
            ancount.append( (len(second_ancestors), anc))
        ancount.sort()
>       return ancount[-1][1]
E       IndexError: list index out of range

ontology_kp.py:69: IndexError
_ test_TRAPI_KPs[test_triples/KP/Service_Provider/mydisease.info_API.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'mydisease.info_API.json', 'location': 'test_triples/KP/Service_Provider/mydisease.info_API.json', 'object': 'NCBIGene:4694', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/mydisease.info_API.json', 'case': {'subject_category': 'bio...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'mydisease.info_API.json', 'location': 'test_triples/KP/Service_Provider/mydisease.info_API.json', 'object': 'NCBIGene:4694', 'object_category': 'biolink:Gene', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/mydisease.info_API.json', 'case': {'subject_category': 'bio...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/671b45c0301c8624abbd26ae78449ca2/query
_ test_TRAPI_KPs[test_triples/KP/Service_Provider/mydisease.info_API.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'mydisease.info_API.json', 'location': 'test_triples/KP/Service_Provider/mydisease.info_API.json', 'object': 'NCBIGene:4694', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/mydisease.info_API.json', 'case': {'subject_category': 'bio...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'mydisease.info_API.json', 'location': 'test_triples/KP/Service_Provider/mydisease.info_API.json', 'object': 'NCBIGene:4694', 'object_category': 'biolink:Gene', ...}
creator = <function raise_predicate_by_subject at 0x1066904c0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/mydisease.info_API.json', 'case': {'subject_category': 'bio...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/671b45c0301c8624abbd26ae78449ca2/query
_ test_TRAPI_KPs[test_triples/KP/Service_Provider/MyGene.info_API.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'MyGene.info_API.json', 'location': 'test_triples/KP/Service_Provider/MyGene.info_API.json', 'object': 'GO:0046872', 'object_category': 'biolink:MolecularActivity', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/MyGene.info_API.json', 'case': {'subject_category': 'biolin...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'MyGene.info_API.json', 'location': 'test_triples/KP/Service_Provider/MyGene.info_API.json', 'object': 'GO:0046872', 'object_category': 'biolink:MolecularActivity', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/MyGene.info_API.json', 'case': {'subject_category': 'biolin...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/59dce17363dce279d389100834e43648/query
_ test_TRAPI_KPs[test_triples/KP/Service_Provider/MyGene.info_API.json_0-by_object] _

KP_TRAPI_case = {'api_name': 'MyGene.info_API.json', 'location': 'test_triples/KP/Service_Provider/MyGene.info_API.json', 'object': 'GO:0046872', 'object_category': 'biolink:MolecularActivity', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/MyGene.info_API.json', 'case': {'subject_category': 'biolin...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'MyGene.info_API.json', 'location': 'test_triples/KP/Service_Provider/MyGene.info_API.json', 'object': 'GO:0046872', 'object_category': 'biolink:MolecularActivity', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/MyGene.info_API.json', 'case': {'subject_category': 'biolin...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/59dce17363dce279d389100834e43648/query
_ test_TRAPI_KPs[test_triples/KP/Service_Provider/MyGene.info_API.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'MyGene.info_API.json', 'location': 'test_triples/KP/Service_Provider/MyGene.info_API.json', 'object': 'GO:0046872', 'object_category': 'biolink:MolecularActivity', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/MyGene.info_API.json', 'case': {'subject_category': 'biolin...Gene.info_API.json', 'url': 'https://api.bte.ncats.io/v1/smartapi/59dce17363dce279d389100834e43648', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'MyGene.info_API.json', 'location': 'test_triples/KP/Service_Provider/MyGene.info_API.json', 'object': 'GO:0046872', 'object_category': 'biolink:MolecularActivity', ...}
creator = <function raise_subject_entity at 0x1066905e0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/MyGene.info_API.json', 'case': {'subject_category': 'biolin...Gene.info_API.json', 'url': 'https://api.bte.ncats.io/v1/smartapi/59dce17363dce279d389100834e43648', 'query_opts': {}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
>       TRAPI_request, output_element, output_node_binding = creator(case)
E       TypeError: cannot unpack non-iterable NoneType object

test_onehops.py:162: TypeError
----------------------------- Captured stdout call -----------------------------
No Parent:  NCBIGene:285381
_ test_TRAPI_KPs[test_triples/KP/Service_Provider/MyGene.info_API.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'MyGene.info_API.json', 'location': 'test_triples/KP/Service_Provider/MyGene.info_API.json', 'object': 'GO:0046872', 'object_category': 'biolink:MolecularActivity', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/MyGene.info_API.json', 'case': {'subject_category': 'biolin...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'MyGene.info_API.json', 'location': 'test_triples/KP/Service_Provider/MyGene.info_API.json', 'object': 'GO:0046872', 'object_category': 'biolink:MolecularActivity', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/MyGene.info_API.json', 'case': {'subject_category': 'biolin...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/59dce17363dce279d389100834e43648/query
_ test_TRAPI_KPs[test_triples/KP/Service_Provider/MyGene.info_API.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'MyGene.info_API.json', 'location': 'test_triples/KP/Service_Provider/MyGene.info_API.json', 'object': 'GO:0046872', 'object_category': 'biolink:MolecularActivity', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/MyGene.info_API.json', 'case': {'subject_category': 'biolin...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'MyGene.info_API.json', 'location': 'test_triples/KP/Service_Provider/MyGene.info_API.json', 'object': 'GO:0046872', 'object_category': 'biolink:MolecularActivity', ...}
creator = <function raise_predicate_by_subject at 0x1066904c0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/MyGene.info_API.json', 'case': {'subject_category': 'biolin...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/59dce17363dce279d389100834e43648/query
_ test_TRAPI_KPs[test_triples/KP/Service_Provider/MyChem.info_API.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'MyChem.info_API.json', 'location': 'test_triples/KP/Service_Provider/MyChem.info_API.json', 'object': 'NCBIGene:1543', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/MyChem.info_API.json', 'case': {'subject_category': 'biolin...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'MyChem.info_API.json', 'location': 'test_triples/KP/Service_Provider/MyChem.info_API.json', 'object': 'NCBIGene:1543', 'object_category': 'biolink:Gene', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/MyChem.info_API.json', 'case': {'subject_category': 'biolin...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/8f08d1446e0bb9c2b323713ce83e2bd3/query
_ test_TRAPI_KPs[test_triples/KP/Service_Provider/MyChem.info_API.json_0-by_object] _

KP_TRAPI_case = {'api_name': 'MyChem.info_API.json', 'location': 'test_triples/KP/Service_Provider/MyChem.info_API.json', 'object': 'NCBIGene:1543', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/MyChem.info_API.json', 'case': {'subject_category': 'biolin...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'MyChem.info_API.json', 'location': 'test_triples/KP/Service_Provider/MyChem.info_API.json', 'object': 'NCBIGene:1543', 'object_category': 'biolink:Gene', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/MyChem.info_API.json', 'case': {'subject_category': 'biolin...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/8f08d1446e0bb9c2b323713ce83e2bd3/query
_ test_TRAPI_KPs[test_triples/KP/Service_Provider/MyChem.info_API.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'MyChem.info_API.json', 'location': 'test_triples/KP/Service_Provider/MyChem.info_API.json', 'object': 'NCBIGene:1543', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/MyChem.info_API.json', 'case': {'subject_category': 'biolin...Chem.info_API.json', 'url': 'https://api.bte.ncats.io/v1/smartapi/8f08d1446e0bb9c2b323713ce83e2bd3', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_onehops.py:162: in execute_TRAPI_lookup
    TRAPI_request, output_element, output_node_binding = creator(case)
test_onehops.py:116: in raise_subject_entity
    parent_subject = ontology_kp.get_parent(subject, subject_cat)
ontology_kp.py:81: in get_parent
    preferred_parent = get_ontology_parent(query_entity,entity_type)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

curie = 'CHEBI:69478', btype = 'biolink:ChemicalSubstance'

    def get_ontology_parent(curie,btype):
        #Here's a bunch of anscestors
        ancestors = get_ontology_ancestors(curie,btype)
        #Now, to get the one closest to the input, we see how many ancestors each ancestor has.  Largest number == lowest down
        ancount = []
        for anc in ancestors:
            second_ancestors = get_ontology_ancestors(anc,btype)
            ancount.append( (len(second_ancestors), anc))
        ancount.sort()
>       return ancount[-1][1]
E       IndexError: list index out of range

ontology_kp.py:69: IndexError
_ test_TRAPI_KPs[test_triples/KP/Service_Provider/MyChem.info_API.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'MyChem.info_API.json', 'location': 'test_triples/KP/Service_Provider/MyChem.info_API.json', 'object': 'NCBIGene:1543', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/MyChem.info_API.json', 'case': {'subject_category': 'biolin...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'MyChem.info_API.json', 'location': 'test_triples/KP/Service_Provider/MyChem.info_API.json', 'object': 'NCBIGene:1543', 'object_category': 'biolink:Gene', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/MyChem.info_API.json', 'case': {'subject_category': 'biolin...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/8f08d1446e0bb9c2b323713ce83e2bd3/query
_ test_TRAPI_KPs[test_triples/KP/Service_Provider/MyChem.info_API.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'MyChem.info_API.json', 'location': 'test_triples/KP/Service_Provider/MyChem.info_API.json', 'object': 'NCBIGene:1543', 'object_category': 'biolink:Gene', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/MyChem.info_API.json', 'case': {'subject_category': 'biolin...Chem.info_API.json', 'url': 'https://api.bte.ncats.io/v1/smartapi/8f08d1446e0bb9c2b323713ce83e2bd3', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_onehops.py:162: in execute_TRAPI_lookup
    TRAPI_request, output_element, output_node_binding = creator(case)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

request = {'api_name': 'MyChem.info_API.json', 'location': 'test_triples/KP/Service_Provider/MyChem.info_API.json', 'object': 'NCBIGene:1543', 'object_category': 'biolink:Gene', ...}

    def raise_predicate_by_subject(request):
        """Given a known triple, create a TRAPI message that uses the parent of the original predicate and looks up
        the object by the subject"""
        transformed_request = request.copy() #there's no depth to request, so it's ok
        if request['predicate'] != 'biolink:related_to':
            original_predicate_element = tk.get_element(request['predicate'])
>           parent = tk.get_element(original_predicate_element['is_a'])
E           TypeError: 'NoneType' object is not subscriptable

test_onehops.py:97: TypeError
_ test_TRAPI_KPs[test_triples/KP/Service_Provider/OpenTarget_API.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'OpenTarget_API.json', 'location': 'test_triples/KP/Service_Provider/OpenTarget_API.json', 'object': 'CHEBI:68478', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/OpenTarget_API.json', 'case': {'subject_category': 'biolink...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'OpenTarget_API.json', 'location': 'test_triples/KP/Service_Provider/OpenTarget_API.json', 'object': 'CHEBI:68478', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/OpenTarget_API.json', 'case': {'subject_category': 'biolink...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/542ba165e1b4227854cf7c0a8addcc79/query
_ test_TRAPI_KPs[test_triples/KP/Service_Provider/OpenTarget_API.json_0-by_object] _

KP_TRAPI_case = {'api_name': 'OpenTarget_API.json', 'location': 'test_triples/KP/Service_Provider/OpenTarget_API.json', 'object': 'CHEBI:68478', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/OpenTarget_API.json', 'case': {'subject_category': 'biolink...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'OpenTarget_API.json', 'location': 'test_triples/KP/Service_Provider/OpenTarget_API.json', 'object': 'CHEBI:68478', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/OpenTarget_API.json', 'case': {'subject_category': 'biolink...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/542ba165e1b4227854cf7c0a8addcc79/query
_ test_TRAPI_KPs[test_triples/KP/Service_Provider/OpenTarget_API.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'OpenTarget_API.json', 'location': 'test_triples/KP/Service_Provider/OpenTarget_API.json', 'object': 'CHEBI:68478', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/OpenTarget_API.json', 'case': {'subject_category': 'biolink...penTarget_API.json', 'url': 'https://api.bte.ncats.io/v1/smartapi/542ba165e1b4227854cf7c0a8addcc79', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'OpenTarget_API.json', 'location': 'test_triples/KP/Service_Provider/OpenTarget_API.json', 'object': 'CHEBI:68478', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function raise_subject_entity at 0x1066905e0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/OpenTarget_API.json', 'case': {'subject_category': 'biolink...penTarget_API.json', 'url': 'https://api.bte.ncats.io/v1/smartapi/542ba165e1b4227854cf7c0a8addcc79', 'query_opts': {}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
>       TRAPI_request, output_element, output_node_binding = creator(case)
E       TypeError: cannot unpack non-iterable NoneType object

test_onehops.py:162: TypeError
----------------------------- Captured stdout call -----------------------------
No Parent:  ENSEMBL:ENSG00000088832
_ test_TRAPI_KPs[test_triples/KP/Service_Provider/OpenTarget_API.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'OpenTarget_API.json', 'location': 'test_triples/KP/Service_Provider/OpenTarget_API.json', 'object': 'CHEBI:68478', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/OpenTarget_API.json', 'case': {'subject_category': 'biolink...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'OpenTarget_API.json', 'location': 'test_triples/KP/Service_Provider/OpenTarget_API.json', 'object': 'CHEBI:68478', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/OpenTarget_API.json', 'case': {'subject_category': 'biolink...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/542ba165e1b4227854cf7c0a8addcc79/query
_ test_TRAPI_KPs[test_triples/KP/Service_Provider/OpenTarget_API.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'OpenTarget_API.json', 'location': 'test_triples/KP/Service_Provider/OpenTarget_API.json', 'object': 'CHEBI:68478', 'object_category': 'biolink:ChemicalSubstance', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/OpenTarget_API.json', 'case': {'subject_category': 'biolink...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'OpenTarget_API.json', 'location': 'test_triples/KP/Service_Provider/OpenTarget_API.json', 'object': 'CHEBI:68478', 'object_category': 'biolink:ChemicalSubstance', ...}
creator = <function raise_predicate_by_subject at 0x1066904c0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/OpenTarget_API.json', 'case': {'subject_category': 'biolink...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/542ba165e1b4227854cf7c0a8addcc79/query
_ test_TRAPI_KPs[test_triples/KP/Service_Provider/Ontology_Lookup_Service_API.json_0-by_subject] _

KP_TRAPI_case = {'api_name': 'Ontology_Lookup_Service_API.json', 'location': 'test_triples/KP/Service_Provider/Ontology_Lookup_Service_API.json', 'object': 'MONDO:0002087', 'object_category': 'biolink:Disease', ...}
trapi_creator = <function by_subject at 0x10620b940>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/Ontology_Lookup_Service_API.json', 'case': {'subject_catego...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Ontology_Lookup_Service_API.json', 'location': 'test_triples/KP/Service_Provider/Ontology_Lookup_Service_API.json', 'object': 'MONDO:0002087', 'object_category': 'biolink:Disease', ...}
creator = <function by_subject at 0x10620b940>
rbag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/Ontology_Lookup_Service_API.json', 'case': {'subject_catego...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/1c056ffc7ed0dd1229e71c4752239465/query
_ test_TRAPI_KPs[test_triples/KP/Service_Provider/Ontology_Lookup_Service_API.json_0-by_object] _

KP_TRAPI_case = {'api_name': 'Ontology_Lookup_Service_API.json', 'location': 'test_triples/KP/Service_Provider/Ontology_Lookup_Service_API.json', 'object': 'MONDO:0002087', 'object_category': 'biolink:Disease', ...}
trapi_creator = <function by_object at 0x106690160>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/Ontology_Lookup_Service_API.json', 'case': {'subject_catego...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Ontology_Lookup_Service_API.json', 'location': 'test_triples/KP/Service_Provider/Ontology_Lookup_Service_API.json', 'object': 'MONDO:0002087', 'object_category': 'biolink:Disease', ...}
creator = <function by_object at 0x106690160>
rbag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/Ontology_Lookup_Service_API.json', 'case': {'subject_catego...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/1c056ffc7ed0dd1229e71c4752239465/query
_ test_TRAPI_KPs[test_triples/KP/Service_Provider/Ontology_Lookup_Service_API.json_0-raise_subject_entity] _

KP_TRAPI_case = {'api_name': 'Ontology_Lookup_Service_API.json', 'location': 'test_triples/KP/Service_Provider/Ontology_Lookup_Service_API.json', 'object': 'MONDO:0002087', 'object_category': 'biolink:Disease', ...}
trapi_creator = <function raise_subject_entity at 0x1066905e0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/Ontology_Lookup_Service_API.json', 'case': {'subject_catego...p_Service_API.json', 'url': 'https://api.bte.ncats.io/v1/smartapi/1c056ffc7ed0dd1229e71c4752239465', 'query_opts': {}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
test_onehops.py:162: in execute_TRAPI_lookup
    TRAPI_request, output_element, output_node_binding = creator(case)
test_onehops.py:116: in raise_subject_entity
    parent_subject = ontology_kp.get_parent(subject, subject_cat)
ontology_kp.py:81: in get_parent
    preferred_parent = get_ontology_parent(query_entity,entity_type)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

curie = 'MONDO:0004992', btype = 'biolink:Disease'

    def get_ontology_parent(curie,btype):
        #Here's a bunch of anscestors
        ancestors = get_ontology_ancestors(curie,btype)
        #Now, to get the one closest to the input, we see how many ancestors each ancestor has.  Largest number == lowest down
        ancount = []
        for anc in ancestors:
            second_ancestors = get_ontology_ancestors(anc,btype)
            ancount.append( (len(second_ancestors), anc))
        ancount.sort()
>       return ancount[-1][1]
E       IndexError: list index out of range

ontology_kp.py:69: IndexError
_ test_TRAPI_KPs[test_triples/KP/Service_Provider/Ontology_Lookup_Service_API.json_0-raise_object_by_subject] _

KP_TRAPI_case = {'api_name': 'Ontology_Lookup_Service_API.json', 'location': 'test_triples/KP/Service_Provider/Ontology_Lookup_Service_API.json', 'object': 'MONDO:0002087', 'object_category': 'biolink:Disease', ...}
trapi_creator = <function raise_object_by_subject at 0x106690550>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/Ontology_Lookup_Service_API.json', 'case': {'subject_catego...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Ontology_Lookup_Service_API.json', 'location': 'test_triples/KP/Service_Provider/Ontology_Lookup_Service_API.json', 'object': 'MONDO:0002087', 'object_category': 'biolink:Disease', ...}
creator = <function raise_object_by_subject at 0x106690550>
rbag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/Ontology_Lookup_Service_API.json', 'case': {'subject_catego...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/1c056ffc7ed0dd1229e71c4752239465/query
_ test_TRAPI_KPs[test_triples/KP/Service_Provider/Ontology_Lookup_Service_API.json_0-raise_predicate_by_subject] _

KP_TRAPI_case = {'api_name': 'Ontology_Lookup_Service_API.json', 'location': 'test_triples/KP/Service_Provider/Ontology_Lookup_Service_API.json', 'object': 'MONDO:0002087', 'object_category': 'biolink:Disease', ...}
trapi_creator = <function raise_predicate_by_subject at 0x1066904c0>
results_bag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/Ontology_Lookup_Service_API.json', 'case': {'subject_catego...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def test_TRAPI_KPs(KP_TRAPI_case,trapi_creator,results_bag):
        """Generic Test for TRAPI KPs. The KP_TRAPI_case fixture is created in conftest.py by looking at the test_triples
        These get successively fed to test_TRAPI.  This function is further parameterized by trapi_creator, which knows
        how to take an input edge and create some kind of TRAPI query from it.  For instance, by_subject removes the object,
        while raise_object_by_subject removes the object and replaces the object category with its biolink parent.
        This approach will need modification if there turn out to be particular elements we want to test for different
        creators.
        """
>       execute_TRAPI_lookup(KP_TRAPI_case,trapi_creator,results_bag)

test_onehops.py:194:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

case = {'api_name': 'Ontology_Lookup_Service_API.json', 'location': 'test_triples/KP/Service_Provider/Ontology_Lookup_Service_API.json', 'object': 'MONDO:0002087', 'object_category': 'biolink:Disease', ...}
creator = <function raise_predicate_by_subject at 0x1066904c0>
rbag = ResultsBag:
{'location': 'test_triples/KP/Service_Provider/Ontology_Lookup_Service_API.json', 'case': {'subject_catego...level': 'WARNING', 'message': "BTE didn't find any bte edges for this batch. Your query terminates.", 'code': None}]}}}

    def execute_TRAPI_lookup(case,creator,rbag):
        #Create TRAPI query/response
        rbag.location = case['location']
        rbag.case = case
        TRAPI_request, output_element, output_node_binding = creator(case)
        if TRAPI_request is None:
            #The particular creator cannot make a valid message from this triple
            return None
        if not is_valid_TRAPI(TRAPI_request['message']):
            #This is a problem with the testing framework.
            exit()
        TRAPI_response  = callTRAPI(case['url'],case['query_opts'],TRAPI_request)
        #Successfully invoked the query endpoint
        rbag.request  = TRAPI_request
        rbag.response = TRAPI_response
        assert TRAPI_response['status_code'] == 200
        #Got back valid TRAPI Response
        response_message = TRAPI_response['response_json']['message']
        assert is_valid_TRAPI(response_message)
        #The response had results
>       assert len( response_message['results'] ) > 0
E       assert 0 > 0
E        +  where 0 = len([])

test_onehops.py:178: AssertionError
----------------------------- Captured stdout call -----------------------------
https://api.bte.ncats.io/v1/smartapi/1c056ffc7ed0dd1229e71c4752239465/query
=========================== short test summary info ============================
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Exposures_Provider/CAM-KP_API.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Exposures_Provider/CAM-KP_API.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Exposures_Provider/ICEES_API.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Exposures_Provider/ICEES_API.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Exposures_Provider/ICEES_API.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Exposures_Provider/ICEES_API.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Exposures_Provider/ICEES_API.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Expander_Agent/RTX_KG2.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Expander_Agent/RTX_KG2.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Expander_Agent/RTX_KG2.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Expander_Agent/RTX_KG2.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Expander_Agent/RTX_KG2.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Genetics_Provider/All_combinations.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Genetics_Provider/All_combinations.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Genetics_Provider/All_combinations.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Genetics_Provider/All_combinations.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Genetics_Provider/All_combinations.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Standards_Reference_Implementation_Team/SRI_Reference_Knowledge_Graph_API.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Standards_Reference_Implementation_Team/SRI_Reference_Knowledge_Graph_API.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Standards_Reference_Implementation_Team/SRI_Reference_Knowledge_Graph_API.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Standards_Reference_Implementation_Team/SRI_Reference_Knowledge_Graph_API.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Standards_Reference_Implementation_Team/SRI_Reference_Knowledge_Graph_API.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Molecular_Data_Provider/MolePro.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Molecular_Data_Provider/MolePro.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Molecular_Data_Provider/MolePro.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Molecular_Data_Provider/MolePro.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Molecular_Data_Provider/MolePro.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Text_Mining_Provider/Text_Mining_Targeted_Association_API.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Text_Mining_Provider/Text_Mining_Targeted_Association_API.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Text_Mining_Provider/Text_Mining_Targeted_Association_API.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Text_Mining_Provider/Text_Mining_Targeted_Association_API.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Text_Mining_Provider/Text_Mining_Targeted_Association_API.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Text_Mining_Provider/Text_Mining_CO-OCCURRENCE_API.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Text_Mining_Provider/Text_Mining_CO-OCCURRENCE_API.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Text_Mining_Provider/Text_Mining_CO-OCCURRENCE_API.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Text_Mining_Provider/Text_Mining_CO-OCCURRENCE_API.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Text_Mining_Provider/Text_Mining_CO-OCCURRENCE_API.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Clinical_Data_Provider/OpenPredict.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Clinical_Data_Provider/OpenPredict.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Clinical_Data_Provider/OpenPredict.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Clinical_Data_Provider/OpenPredict.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Clinical_Data_Provider/OpenPredict.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Clinical_Data_Provider/Columbia_Open_Health_Data_(COHD).json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Clinical_Data_Provider/Columbia_Open_Health_Data_(COHD).json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Clinical_Data_Provider/Columbia_Open_Health_Data_(COHD).json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Clinical_Data_Provider/Columbia_Open_Health_Data_(COHD).json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Clinical_Data_Provider/Columbia_Open_Health_Data_(COHD).json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/Multiomics_Wellness_KP_API.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/Multiomics_Wellness_KP_API.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/Multiomics_Wellness_KP_API.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/Multiomics_Wellness_KP_API.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/Multiomics_Wellness_KP_API.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/TCGA_Mutation_Frequency_KP_API.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/TCGA_Mutation_Frequency_KP_API.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/TCGA_Mutation_Frequency_KP_API.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/TCGA_Mutation_Frequency_KP_API.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/TCGA_Mutation_Frequency_KP_API.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/Drug_Response_KP_API.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/Drug_Response_KP_API.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/Drug_Response_KP_API.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/Drug_Response_KP_API.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/Drug_Response_KP_API.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/Clinical_Risk_KP_API.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/Clinical_Risk_KP_API.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/Clinical_Risk_KP_API.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/Clinical_Risk_KP_API.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Multiomics_Provider/Clinical_Risk_KP_API.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Biolink.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Biolink.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Biolink.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Biolink.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Biolink.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_HGNC.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_HGNC.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_HGNC.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_HGNC.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_HGNC.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_CTD.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_CTD.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_CTD.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_CTD.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_CTD.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_GTEx.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_GTEx.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_GTEx.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_GTEx.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_GTEx.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Gtopdb.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Gtopdb.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Gtopdb.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Gtopdb.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Gtopdb.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Chemical_normalization.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Chemical_normalization.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Chemical_normalization.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Chemical_normalization.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Chemical_normalization.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_KEGG.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_KEGG.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_KEGG.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_KEGG.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_KEGG.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Viral_Proteome.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Viral_Proteome.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Viral_Proteome.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Viral_Proteome.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Viral_Proteome.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_MyChem.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_MyChem.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_MyChem.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_MyChem.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_MyChem.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Foodb.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Foodb.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Foodb.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Foodb.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Foodb.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Cord19_Scigraph.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Cord19_Scigraph.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Cord19_Scigraph.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Cord19_Scigraph.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Cord19_Scigraph.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Pharos.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Pharos.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Pharos.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Pharos.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Pharos.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Panther.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Panther.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Panther.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Panther.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Panther.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Ontological_Hierarchy.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Ontological_Hierarchy.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Ontological_Hierarchy.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Ontological_Hierarchy.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Ontological_Hierarchy.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Uberongraph.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Uberongraph.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Uberongraph.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Uberongraph.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Uberongraph.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_HMDB.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_HMDB.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_HMDB.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_HMDB.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_HMDB.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Cord19_Scibite.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Cord19_Scibite.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Cord19_Scibite.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Cord19_Scibite.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Cord19_Scibite.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Covid_Phenotypes.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Covid_Phenotypes.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Covid_Phenotypes.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Covid_Phenotypes.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Covid_Phenotypes.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Hetio.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Hetio.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Hetio.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Hetio.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Hetio.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_IntAct.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_IntAct.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_IntAct.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_IntAct.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_IntAct.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Human_GOA.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Human_GOA.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Human_GOA.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Human_GOA.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Human_GOA.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Chembio.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Chembio.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Chembio.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Chembio.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Chembio.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Textmining_KP.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Textmining_KP.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Textmining_KP.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Textmining_KP.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Ranking_Agent/Automat_Textmining_KP.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Service_Provider/mydisease.info_API.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Service_Provider/mydisease.info_API.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Service_Provider/mydisease.info_API.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Service_Provider/mydisease.info_API.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Service_Provider/mydisease.info_API.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Service_Provider/MyGene.info_API.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Service_Provider/MyGene.info_API.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Service_Provider/MyGene.info_API.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Service_Provider/MyGene.info_API.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Service_Provider/MyGene.info_API.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Service_Provider/MyChem.info_API.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Service_Provider/MyChem.info_API.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Service_Provider/MyChem.info_API.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Service_Provider/MyChem.info_API.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Service_Provider/MyChem.info_API.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Service_Provider/OpenTarget_API.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Service_Provider/OpenTarget_API.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Service_Provider/OpenTarget_API.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Service_Provider/OpenTarget_API.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Service_Provider/OpenTarget_API.json_0-raise_predicate_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Service_Provider/Ontology_Lookup_Service_API.json_0-by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Service_Provider/Ontology_Lookup_Service_API.json_0-by_object]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Service_Provider/Ontology_Lookup_Service_API.json_0-raise_subject_entity]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Service_Provider/Ontology_Lookup_Service_API.json_0-raise_object_by_subject]
FAILED test_onehops.py::test_TRAPI_KPs[test_triples/KP/Service_Provider/Ontology_Lookup_Service_API.json_0-raise_predicate_by_subject]
================== 207 failed, 3 passed in 114.26s (0:01:54) ===================

Process finished with exit code 1
